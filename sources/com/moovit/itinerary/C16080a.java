package com.moovit.itinerary;

import c00.C13719c;
import c00.C13720d;
import c00.C13722f;
import c00.C13733n;
import c70.C13749c;
import ce0.C21100e;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.moovit.MoovitApplication;
import com.moovit.accessibility.AccessibilityPersonalPrefs;
import com.moovit.analytics.AnalyticsAttributeKey;
import com.moovit.analytics.AnalyticsEventKey;
import com.moovit.analytics.AnalyticsFlowKey;
import com.moovit.commons.geo.Polyline;
import com.moovit.commons.geo.Polylon;
import com.moovit.commons.request.BadResponseException;
import com.moovit.commons.utils.ApplicationBugException;
import com.moovit.database.DbEntityRef;
import com.moovit.image.C16028g;
import com.moovit.image.model.Image;
import com.moovit.itinerary.TripPlanTodBanner;
import com.moovit.itinerary.model.EmissionLevel;
import com.moovit.itinerary.model.Itinerary;
import com.moovit.itinerary.model.ItineraryMetadata;
import com.moovit.itinerary.model.TripPlanConfig;
import com.moovit.itinerary.model.TurnInstruction;
import com.moovit.itinerary.model.leg.BicycleLeg;
import com.moovit.itinerary.model.leg.BicycleRentalLeg;
import com.moovit.itinerary.model.leg.CarLeg;
import com.moovit.itinerary.model.leg.CarpoolLeg;
import com.moovit.itinerary.model.leg.DocklessBicycleLeg;
import com.moovit.itinerary.model.leg.DocklessCarLeg;
import com.moovit.itinerary.model.leg.DocklessMopedLeg;
import com.moovit.itinerary.model.leg.DocklessScooterLeg;
import com.moovit.itinerary.model.leg.EventLeg;
import com.moovit.itinerary.model.leg.Leg;
import com.moovit.itinerary.model.leg.MultiTransitLinesLeg;
import com.moovit.itinerary.model.leg.PathwayWalkLeg;
import com.moovit.itinerary.model.leg.TaxiLeg;
import com.moovit.itinerary.model.leg.TransitLineLeg;
import com.moovit.itinerary.model.leg.WaitToMultiTransitLinesLeg;
import com.moovit.itinerary.model.leg.WaitToTaxiLeg;
import com.moovit.itinerary.model.leg.WaitToTransitLineLeg;
import com.moovit.itinerary.model.leg.WalkLeg;
import com.moovit.network.model.LongServerId;
import com.moovit.network.model.ServerId;
import com.moovit.servicealerts.LineServiceAlertDigest;
import com.moovit.taxi.C7630a;
import com.moovit.taxi.TaxiPrice;
import com.moovit.transit.BicycleStop;
import com.moovit.transit.LocationDescriptor;
import com.moovit.transit.Schedule;
import com.moovit.transit.TransitLine;
import com.moovit.transit.TransitStop;
import com.moovit.tripplanner.TripPlannerAlgorithmType;
import com.moovit.tripplanner.TripPlannerPersonalPrefs;
import com.moovit.tripplanner.TripPlannerRouteType;
import com.moovit.tripplanner.TripPlannerTime;
import com.moovit.tripplanner.TripPlannerTransportType;
import com.moovit.util.CurrencyAmount;
import com.moovit.util.time.C7923a;
import com.moovit.util.time.StopRealTimeInformation;
import com.moovit.util.time.Time;
import com.tranzmate.moovit.protocol.common.MVCurrencyAmount;
import com.tranzmate.moovit.protocol.common.MVLocationDescriptor;
import com.tranzmate.moovit.protocol.common.MVLocationType;
import com.tranzmate.moovit.protocol.common.MVRouteType;
import com.tranzmate.moovit.protocol.fare.MVItineraryFare;
import com.tranzmate.moovit.protocol.fare.MVLegFare;
import com.tranzmate.moovit.protocol.linearrivals.MVArrival;
import com.tranzmate.moovit.protocol.taxi.MVTaxiPrice;
import com.tranzmate.moovit.protocol.tripplanner.MVAbsoluteDirection;
import com.tranzmate.moovit.protocol.tripplanner.MVAlgorithmType;
import com.tranzmate.moovit.protocol.tripplanner.MVBicycleLeg;
import com.tranzmate.moovit.protocol.tripplanner.MVBicycleRentalLeg;
import com.tranzmate.moovit.protocol.tripplanner.MVCarLeg;
import com.tranzmate.moovit.protocol.tripplanner.MVCarPoolSource;
import com.tranzmate.moovit.protocol.tripplanner.MVEmissionLevel;
import com.tranzmate.moovit.protocol.tripplanner.MVGroupType;
import com.tranzmate.moovit.protocol.tripplanner.MVJourney;
import com.tranzmate.moovit.protocol.tripplanner.MVLineLeg;
import com.tranzmate.moovit.protocol.tripplanner.MVLineWithAlternativesLeg;
import com.tranzmate.moovit.protocol.tripplanner.MVLocationSourceType;
import com.tranzmate.moovit.protocol.tripplanner.MVLocationTarget;
import com.tranzmate.moovit.protocol.tripplanner.MVPathwayWalkLeg;
import com.tranzmate.moovit.protocol.tripplanner.MVPersonalPreferences;
import com.tranzmate.moovit.protocol.tripplanner.MVRelativeDirection;
import com.tranzmate.moovit.protocol.tripplanner.MVTaxiLeg;
import com.tranzmate.moovit.protocol.tripplanner.MVTime;
import com.tranzmate.moovit.protocol.tripplanner.MVTimeType;
import com.tranzmate.moovit.protocol.tripplanner.MVTripPlanFlexTimeBanner;
import com.tranzmate.moovit.protocol.tripplanner.MVTripPlanItinerary;
import com.tranzmate.moovit.protocol.tripplanner.MVTripPlanItineraryUpdate;
import com.tranzmate.moovit.protocol.tripplanner.MVTripPlanLeg;
import com.tranzmate.moovit.protocol.tripplanner.MVTripPlanPref;
import com.tranzmate.moovit.protocol.tripplanner.MVTripPlanSectionMatchCount;
import com.tranzmate.moovit.protocol.tripplanner.MVTripPlanSectionedResponse;
import com.tranzmate.moovit.protocol.tripplanner.MVTripPlanSections;
import com.tranzmate.moovit.protocol.tripplanner.MVTripPlanShape;
import com.tranzmate.moovit.protocol.tripplanner.MVTripPlanTodBanner;
import com.tranzmate.moovit.protocol.tripplanner.MVTripPlanTransportOptionPref;
import com.tranzmate.moovit.protocol.tripplanner.MVWaitToLineAlternative;
import com.tranzmate.moovit.protocol.tripplanner.MVWaitToLineLeg;
import com.tranzmate.moovit.protocol.tripplanner.MVWaitToLineLegDepartureTimes;
import com.tranzmate.moovit.protocol.tripplanner.MVWaitToMultiLineLeg;
import com.tranzmate.moovit.protocol.tripplanner.MVWaitToTaxiLeg;
import com.tranzmate.moovit.protocol.tripplanner.MVWalkLeg;
import com.tranzmate.moovit.protocol.tripplanner.MVWalkingDirection;
import com.tranzmate.moovit.protocol.tripplanner.MVWalkingInstruction;
import e20.C16766b;
import e20.C16767c;
import e20.C16768d;
import i30.C5268d;
import i30.C5269e;
import j80.C12776e;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import k40.C5479c;
import p009a8.C0112l;
import p066e0.C4454r0;
import p269u2.C6677a;
import p373au.C13533e;
import p543hq.C17474b;
import p543hq.C17478e;
import p638lr.C18267n;
import p714ow.C18847a;
import p714ow.C18848b;
import p810sz.C19617r;
import p824tp.C19728f;
import p826tr.C19752b;
import p828tt.C19759a;
import p875vs.C20228e;
import p977zz.C20944i0;
import p977zz.C20964s0;
import q00.C19047a;
import q00.C19053d;
import vi0.C25111a;
import xi0.C25276a;

/* renamed from: com.moovit.itinerary.a */
public final class C16080a {

    /* renamed from: a */
    public static final C19617r f41870a;

    /* renamed from: com.moovit.itinerary.a$a */
    public static /* synthetic */ class C16081a {

        /* renamed from: a */
        public static final /* synthetic */ int[] f41871a;

        /* renamed from: b */
        public static final /* synthetic */ int[] f41872b;

        /* renamed from: c */
        public static final /* synthetic */ int[] f41873c;

        /* renamed from: d */
        public static final /* synthetic */ int[] f41874d;

        /* renamed from: e */
        public static final /* synthetic */ int[] f41875e;

        /* renamed from: f */
        public static final /* synthetic */ int[] f41876f;

        /* renamed from: g */
        public static final /* synthetic */ int[] f41877g;

        /* renamed from: h */
        public static final /* synthetic */ int[] f41878h;

        /* renamed from: i */
        public static final /* synthetic */ int[] f41879i;

        /* renamed from: j */
        public static final /* synthetic */ int[] f41880j;

        /* renamed from: k */
        public static final /* synthetic */ int[] f41881k;

        /* renamed from: l */
        public static final /* synthetic */ int[] f41882l;

        /* renamed from: m */
        public static final /* synthetic */ int[] f41883m;

        /* renamed from: n */
        public static final /* synthetic */ int[] f41884n;

        /* renamed from: o */
        public static final /* synthetic */ int[] f41885o;

        /* renamed from: p */
        public static final /* synthetic */ int[] f41886p;

        /* renamed from: q */
        public static final /* synthetic */ int[] f41887q;

        /* renamed from: r */
        public static final /* synthetic */ int[] f41888r;

        /* JADX WARNING: Can't wrap try/catch for region: R(236:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|(2:49|50)|51|53|54|(2:55|56)|57|59|60|61|62|63|64|65|66|(2:67|68)|69|71|72|73|74|75|76|77|78|79|80|81|82|83|84|(2:85|86)|87|89|90|91|92|(2:93|94)|95|97|98|99|100|(2:101|102)|103|105|106|107|108|(2:109|110)|111|113|114|115|116|(2:117|118)|119|121|122|123|124|125|126|127|128|129|130|131|132|133|134|(2:135|136)|137|139|140|141|142|143|144|145|146|147|148|149|150|151|152|(2:153|154)|155|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|(2:197|198)|199|201|202|203|204|205|206|207|208|209|210|211|212|213|214|(2:215|216)|217|219|220|221|222|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|(2:243|244)|245|247|248|249|250|251|252|(2:253|254)|255|257|258|259|260|261|262|263|264|265|266|(2:267|268)|269|271|272|273|274|275|276|277|278|279|280|(2:281|282)|283|(2:285|286)|287|289|290|291|292|(3:293|294|296)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(237:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|(2:49|50)|51|53|54|(2:55|56)|57|59|60|61|62|63|64|65|66|(2:67|68)|69|71|72|73|74|75|76|77|78|79|80|81|82|83|84|(2:85|86)|87|89|90|91|92|(2:93|94)|95|97|98|99|100|(2:101|102)|103|105|106|107|108|(2:109|110)|111|113|114|115|116|(2:117|118)|119|121|122|123|124|125|126|127|128|129|130|131|132|133|134|(2:135|136)|137|139|140|141|142|143|144|145|146|147|148|149|150|151|152|(2:153|154)|155|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|(2:197|198)|199|201|202|203|204|205|206|207|208|209|210|211|212|213|214|(2:215|216)|217|219|220|221|222|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|(2:243|244)|245|247|248|249|250|251|252|(2:253|254)|255|257|258|259|260|261|262|263|264|265|266|(2:267|268)|269|271|272|273|274|275|276|277|278|279|280|281|282|283|(2:285|286)|287|289|290|291|292|(3:293|294|296)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(238:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|(2:49|50)|51|53|54|(2:55|56)|57|59|60|61|62|63|64|65|66|67|68|69|71|72|73|74|75|76|77|78|79|80|81|82|83|84|(2:85|86)|87|89|90|91|92|(2:93|94)|95|97|98|99|100|(2:101|102)|103|105|106|107|108|(2:109|110)|111|113|114|115|116|(2:117|118)|119|121|122|123|124|125|126|127|128|129|130|131|132|133|134|(2:135|136)|137|139|140|141|142|143|144|145|146|147|148|149|150|151|152|(2:153|154)|155|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|(2:197|198)|199|201|202|203|204|205|206|207|208|209|210|211|212|213|214|(2:215|216)|217|219|220|221|222|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|(2:243|244)|245|247|248|249|250|251|252|(2:253|254)|255|257|258|259|260|261|262|263|264|265|266|(2:267|268)|269|271|272|273|274|275|276|277|278|279|280|281|282|283|(2:285|286)|287|289|290|291|292|(3:293|294|296)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(239:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|(2:49|50)|51|53|54|(2:55|56)|57|59|60|61|62|63|64|65|66|67|68|69|71|72|73|74|75|76|77|78|79|80|81|82|83|84|(2:85|86)|87|89|90|91|92|(2:93|94)|95|97|98|99|100|(2:101|102)|103|105|106|107|108|(2:109|110)|111|113|114|115|116|117|118|119|121|122|123|124|125|126|127|128|129|130|131|132|133|134|(2:135|136)|137|139|140|141|142|143|144|145|146|147|148|149|150|151|152|(2:153|154)|155|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|(2:197|198)|199|201|202|203|204|205|206|207|208|209|210|211|212|213|214|(2:215|216)|217|219|220|221|222|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|(2:243|244)|245|247|248|249|250|251|252|(2:253|254)|255|257|258|259|260|261|262|263|264|265|266|(2:267|268)|269|271|272|273|274|275|276|277|278|279|280|281|282|283|(2:285|286)|287|289|290|291|292|(3:293|294|296)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(241:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|(2:49|50)|51|53|54|(2:55|56)|57|59|60|61|62|63|64|65|66|67|68|69|71|72|73|74|75|76|77|78|79|80|81|82|83|84|(2:85|86)|87|89|90|91|92|(2:93|94)|95|97|98|99|100|(2:101|102)|103|105|106|107|108|(2:109|110)|111|113|114|115|116|117|118|119|121|122|123|124|125|126|127|128|129|130|131|132|133|134|(2:135|136)|137|139|140|141|142|143|144|145|146|147|148|149|150|151|152|(2:153|154)|155|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|(2:197|198)|199|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|219|220|221|222|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|(2:243|244)|245|247|248|249|250|251|252|(2:253|254)|255|257|258|259|260|261|262|263|264|265|266|267|268|269|271|272|273|274|275|276|277|278|279|280|281|282|283|(2:285|286)|287|289|290|291|292|(3:293|294|296)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(243:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|(2:49|50)|51|53|54|55|56|57|59|60|61|62|63|64|65|66|67|68|69|71|72|73|74|75|76|77|78|79|80|81|82|83|84|(2:85|86)|87|89|90|91|92|(2:93|94)|95|97|98|99|100|(2:101|102)|103|105|106|107|108|109|110|111|113|114|115|116|117|118|119|121|122|123|124|125|126|127|128|129|130|131|132|133|134|(2:135|136)|137|139|140|141|142|143|144|145|146|147|148|149|150|151|152|(2:153|154)|155|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|(2:197|198)|199|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|219|220|221|222|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|(2:243|244)|245|247|248|249|250|251|252|(2:253|254)|255|257|258|259|260|261|262|263|264|265|266|267|268|269|271|272|273|274|275|276|277|278|279|280|281|282|283|(2:285|286)|287|289|290|291|292|(3:293|294|296)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(244:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|49|50|51|53|54|55|56|57|59|60|61|62|63|64|65|66|67|68|69|71|72|73|74|75|76|77|78|79|80|81|82|83|84|(2:85|86)|87|89|90|91|92|(2:93|94)|95|97|98|99|100|(2:101|102)|103|105|106|107|108|109|110|111|113|114|115|116|117|118|119|121|122|123|124|125|126|127|128|129|130|131|132|133|134|(2:135|136)|137|139|140|141|142|143|144|145|146|147|148|149|150|151|152|(2:153|154)|155|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|(2:197|198)|199|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|219|220|221|222|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|(2:243|244)|245|247|248|249|250|251|252|(2:253|254)|255|257|258|259|260|261|262|263|264|265|266|267|268|269|271|272|273|274|275|276|277|278|279|280|281|282|283|(2:285|286)|287|289|290|291|292|(3:293|294|296)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(246:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|45|46|47|49|50|51|53|54|55|56|57|59|60|61|62|63|64|65|66|67|68|69|71|72|73|74|75|76|77|78|79|80|81|82|83|84|(2:85|86)|87|89|90|91|92|(2:93|94)|95|97|98|99|100|101|102|103|105|106|107|108|109|110|111|113|114|115|116|117|118|119|121|122|123|124|125|126|127|128|129|130|131|132|133|134|(2:135|136)|137|139|140|141|142|143|144|145|146|147|148|149|150|151|152|(2:153|154)|155|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|(2:197|198)|199|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|219|220|221|222|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|(2:243|244)|245|247|248|249|250|251|252|(2:253|254)|255|257|258|259|260|261|262|263|264|265|266|267|268|269|271|272|273|274|275|276|277|278|279|280|281|282|283|(2:285|286)|287|289|290|291|292|(3:293|294|296)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(247:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|45|46|47|49|50|51|53|54|55|56|57|59|60|61|62|63|64|65|66|67|68|69|71|72|73|74|75|76|77|78|79|80|81|82|83|84|(2:85|86)|87|89|90|91|92|(2:93|94)|95|97|98|99|100|101|102|103|105|106|107|108|109|110|111|113|114|115|116|117|118|119|121|122|123|124|125|126|127|128|129|130|131|132|133|134|(2:135|136)|137|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|(2:197|198)|199|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|219|220|221|222|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|(2:243|244)|245|247|248|249|250|251|252|(2:253|254)|255|257|258|259|260|261|262|263|264|265|266|267|268|269|271|272|273|274|275|276|277|278|279|280|281|282|283|(2:285|286)|287|289|290|291|292|(3:293|294|296)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(249:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|41|42|43|45|46|47|49|50|51|53|54|55|56|57|59|60|61|62|63|64|65|66|67|68|69|71|72|73|74|75|76|77|78|79|80|81|82|83|84|(2:85|86)|87|89|90|91|92|(2:93|94)|95|97|98|99|100|101|102|103|105|106|107|108|109|110|111|113|114|115|116|117|118|119|121|122|123|124|125|126|127|128|129|130|131|132|133|134|(2:135|136)|137|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|(2:197|198)|199|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|219|220|221|222|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|(2:243|244)|245|247|248|249|250|251|252|253|254|255|257|258|259|260|261|262|263|264|265|266|267|268|269|271|272|273|274|275|276|277|278|279|280|281|282|283|(2:285|286)|287|289|290|291|292|(3:293|294|296)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(250:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|56|57|59|60|61|62|63|64|65|66|67|68|69|71|72|73|74|75|76|77|78|79|80|81|82|83|84|(2:85|86)|87|89|90|91|92|(2:93|94)|95|97|98|99|100|101|102|103|105|106|107|108|109|110|111|113|114|115|116|117|118|119|121|122|123|124|125|126|127|128|129|130|131|132|133|134|(2:135|136)|137|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|(2:197|198)|199|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|219|220|221|222|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|(2:243|244)|245|247|248|249|250|251|252|253|254|255|257|258|259|260|261|262|263|264|265|266|267|268|269|271|272|273|274|275|276|277|278|279|280|281|282|283|(2:285|286)|287|289|290|291|292|(3:293|294|296)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(251:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|56|57|59|60|61|62|63|64|65|66|67|68|69|71|72|73|74|75|76|77|78|79|80|81|82|83|84|(2:85|86)|87|89|90|91|92|(2:93|94)|95|97|98|99|100|101|102|103|105|106|107|108|109|110|111|113|114|115|116|117|118|119|121|122|123|124|125|126|127|128|129|130|131|132|133|134|(2:135|136)|137|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|219|220|221|222|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|(2:243|244)|245|247|248|249|250|251|252|253|254|255|257|258|259|260|261|262|263|264|265|266|267|268|269|271|272|273|274|275|276|277|278|279|280|281|282|283|(2:285|286)|287|289|290|291|292|(3:293|294|296)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(253:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|56|57|59|60|61|62|63|64|65|66|67|68|69|71|72|73|74|75|76|77|78|79|80|81|82|83|84|(2:85|86)|87|89|90|91|92|93|94|95|97|98|99|100|101|102|103|105|106|107|108|109|110|111|113|114|115|116|117|118|119|121|122|123|124|125|126|127|128|129|130|131|132|133|134|(2:135|136)|137|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|219|220|221|222|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|(2:243|244)|245|247|248|249|250|251|252|253|254|255|257|258|259|260|261|262|263|264|265|266|267|268|269|271|272|273|274|275|276|277|278|279|280|281|282|283|(2:285|286)|287|289|290|291|292|(3:293|294|296)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(254:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|56|57|59|60|61|62|63|64|65|66|67|68|69|71|72|73|74|75|76|77|78|79|80|81|82|83|84|(2:85|86)|87|89|90|91|92|93|94|95|97|98|99|100|101|102|103|105|106|107|108|109|110|111|113|114|115|116|117|118|119|121|122|123|124|125|126|127|128|129|130|131|132|133|134|(2:135|136)|137|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|219|220|221|222|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|(2:243|244)|245|247|248|249|250|251|252|253|254|255|257|258|259|260|261|262|263|264|265|266|267|268|269|271|272|273|274|275|276|277|278|279|280|281|282|283|(2:285|286)|287|289|290|291|292|(3:293|294|296)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(256:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|56|57|59|60|61|62|63|64|65|66|67|68|69|71|72|73|74|75|76|77|78|79|80|81|82|83|84|(2:85|86)|87|89|90|91|92|93|94|95|97|98|99|100|101|102|103|105|106|107|108|109|110|111|113|114|115|116|117|118|119|121|122|123|124|125|126|127|128|129|130|131|132|133|134|(2:135|136)|137|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|219|220|221|222|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|247|248|249|250|251|252|253|254|255|257|258|259|260|261|262|263|264|265|266|267|268|269|271|272|273|274|275|276|277|278|279|280|281|282|283|(2:285|286)|287|289|290|291|292|(3:293|294|296)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(257:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|21|22|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|56|57|59|60|61|62|63|64|65|66|67|68|69|71|72|73|74|75|76|77|78|79|80|81|82|83|84|(2:85|86)|87|89|90|91|92|93|94|95|97|98|99|100|101|102|103|105|106|107|108|109|110|111|113|114|115|116|117|118|119|121|122|123|124|125|126|127|128|129|130|131|132|133|134|(2:135|136)|137|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|219|220|221|222|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|247|248|249|250|251|252|253|254|255|257|258|259|260|261|262|263|264|265|266|267|268|269|271|272|273|274|275|276|277|278|279|280|281|282|283|(2:285|286)|287|289|290|291|292|(3:293|294|296)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(258:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|21|22|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|56|57|59|60|61|62|63|64|65|66|67|68|69|71|72|73|74|75|76|77|78|79|80|81|82|83|84|85|86|87|89|90|91|92|93|94|95|97|98|99|100|101|102|103|105|106|107|108|109|110|111|113|114|115|116|117|118|119|121|122|123|124|125|126|127|128|129|130|131|132|133|134|(2:135|136)|137|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|219|220|221|222|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|247|248|249|250|251|252|253|254|255|257|258|259|260|261|262|263|264|265|266|267|268|269|271|272|273|274|275|276|277|278|279|280|281|282|283|(2:285|286)|287|289|290|291|292|(3:293|294|296)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(259:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|17|18|19|21|22|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|56|57|59|60|61|62|63|64|65|66|67|68|69|71|72|73|74|75|76|77|78|79|80|81|82|83|84|85|86|87|89|90|91|92|93|94|95|97|98|99|100|101|102|103|105|106|107|108|109|110|111|113|114|115|116|117|118|119|121|122|123|124|125|126|127|128|129|130|131|132|133|134|(2:135|136)|137|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|219|220|221|222|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|247|248|249|250|251|252|253|254|255|257|258|259|260|261|262|263|264|265|266|267|268|269|271|272|273|274|275|276|277|278|279|280|281|282|283|(2:285|286)|287|289|290|291|292|(3:293|294|296)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(261:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|17|18|19|21|22|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|56|57|59|60|61|62|63|64|65|66|67|68|69|71|72|73|74|75|76|77|78|79|80|81|82|83|84|85|86|87|89|90|91|92|93|94|95|97|98|99|100|101|102|103|105|106|107|108|109|110|111|113|114|115|116|117|118|119|121|122|123|124|125|126|127|128|129|130|131|132|133|134|(2:135|136)|137|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|219|220|221|222|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|247|248|249|250|251|252|253|254|255|257|258|259|260|261|262|263|264|265|266|267|268|269|271|272|273|274|275|276|277|278|279|280|281|282|283|(2:285|286)|287|289|290|291|292|293|294|296) */
        /* JADX WARNING: Can't wrap try/catch for region: R(262:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|13|14|15|17|18|19|21|22|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|56|57|59|60|61|62|63|64|65|66|67|68|69|71|72|73|74|75|76|77|78|79|80|81|82|83|84|85|86|87|89|90|91|92|93|94|95|97|98|99|100|101|102|103|105|106|107|108|109|110|111|113|114|115|116|117|118|119|121|122|123|124|125|126|127|128|129|130|131|132|133|134|(2:135|136)|137|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|219|220|221|222|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|247|248|249|250|251|252|253|254|255|257|258|259|260|261|262|263|264|265|266|267|268|269|271|272|273|274|275|276|277|278|279|280|281|282|283|(2:285|286)|287|289|290|291|292|293|294|296) */
        /* JADX WARNING: Can't wrap try/catch for region: R(263:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|13|14|15|17|18|19|21|22|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|56|57|59|60|61|62|63|64|65|66|67|68|69|71|72|73|74|75|76|77|78|79|80|81|82|83|84|85|86|87|89|90|91|92|93|94|95|97|98|99|100|101|102|103|105|106|107|108|109|110|111|113|114|115|116|117|118|119|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|219|220|221|222|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|247|248|249|250|251|252|253|254|255|257|258|259|260|261|262|263|264|265|266|267|268|269|271|272|273|274|275|276|277|278|279|280|281|282|283|(2:285|286)|287|289|290|291|292|293|294|296) */
        /* JADX WARNING: Can't wrap try/catch for region: R(264:0|(2:1|2)|3|(2:5|6)|7|9|10|11|13|14|15|17|18|19|21|22|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|56|57|59|60|61|62|63|64|65|66|67|68|69|71|72|73|74|75|76|77|78|79|80|81|82|83|84|85|86|87|89|90|91|92|93|94|95|97|98|99|100|101|102|103|105|106|107|108|109|110|111|113|114|115|116|117|118|119|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|219|220|221|222|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|247|248|249|250|251|252|253|254|255|257|258|259|260|261|262|263|264|265|266|267|268|269|271|272|273|274|275|276|277|278|279|280|281|282|283|(2:285|286)|287|289|290|291|292|293|294|296) */
        /* JADX WARNING: Can't wrap try/catch for region: R(265:0|(2:1|2)|3|5|6|7|9|10|11|13|14|15|17|18|19|21|22|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|56|57|59|60|61|62|63|64|65|66|67|68|69|71|72|73|74|75|76|77|78|79|80|81|82|83|84|85|86|87|89|90|91|92|93|94|95|97|98|99|100|101|102|103|105|106|107|108|109|110|111|113|114|115|116|117|118|119|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|219|220|221|222|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|247|248|249|250|251|252|253|254|255|257|258|259|260|261|262|263|264|265|266|267|268|269|271|272|273|274|275|276|277|278|279|280|281|282|283|(2:285|286)|287|289|290|291|292|293|294|296) */
        /* JADX WARNING: Can't wrap try/catch for region: R(266:0|(2:1|2)|3|5|6|7|9|10|11|13|14|15|17|18|19|21|22|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|56|57|59|60|61|62|63|64|65|66|67|68|69|71|72|73|74|75|76|77|78|79|80|81|82|83|84|85|86|87|89|90|91|92|93|94|95|97|98|99|100|101|102|103|105|106|107|108|109|110|111|113|114|115|116|117|118|119|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|219|220|221|222|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|247|248|249|250|251|252|253|254|255|257|258|259|260|261|262|263|264|265|266|267|268|269|271|272|273|274|275|276|277|278|279|280|281|282|283|285|286|287|289|290|291|292|293|294|296) */
        /* JADX WARNING: Can't wrap try/catch for region: R(267:0|1|2|3|5|6|7|9|10|11|13|14|15|17|18|19|21|22|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|56|57|59|60|61|62|63|64|65|66|67|68|69|71|72|73|74|75|76|77|78|79|80|81|82|83|84|85|86|87|89|90|91|92|93|94|95|97|98|99|100|101|102|103|105|106|107|108|109|110|111|113|114|115|116|117|118|119|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|219|220|221|222|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|247|248|249|250|251|252|253|254|255|257|258|259|260|261|262|263|264|265|266|267|268|269|271|272|273|274|275|276|277|278|279|280|281|282|283|285|286|287|289|290|291|292|293|294|296) */
        /* JADX WARNING: Failed to process nested try/catch */
        /* JADX WARNING: Missing exception handler attribute for start block: B:101:0x0187 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:107:0x01a2 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:109:0x01ac */
        /* JADX WARNING: Missing exception handler attribute for start block: B:115:0x01c7 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:117:0x01d1 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:123:0x01ec */
        /* JADX WARNING: Missing exception handler attribute for start block: B:125:0x01f6 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:127:0x0200 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:129:0x020a */
        /* JADX WARNING: Missing exception handler attribute for start block: B:131:0x0214 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:133:0x021e */
        /* JADX WARNING: Missing exception handler attribute for start block: B:135:0x0228 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:141:0x0243 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:143:0x024d */
        /* JADX WARNING: Missing exception handler attribute for start block: B:145:0x0257 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:147:0x0261 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:149:0x026b */
        /* JADX WARNING: Missing exception handler attribute for start block: B:151:0x0275 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:153:0x027f */
        /* JADX WARNING: Missing exception handler attribute for start block: B:159:0x029a */
        /* JADX WARNING: Missing exception handler attribute for start block: B:161:0x02a4 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:163:0x02ae */
        /* JADX WARNING: Missing exception handler attribute for start block: B:165:0x02b8 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:167:0x02c2 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:169:0x02cc */
        /* JADX WARNING: Missing exception handler attribute for start block: B:171:0x02d6 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:173:0x02e0 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:175:0x02ea */
        /* JADX WARNING: Missing exception handler attribute for start block: B:177:0x02f4 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:179:0x02fe */
        /* JADX WARNING: Missing exception handler attribute for start block: B:181:0x0308 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:183:0x0312 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:185:0x031e */
        /* JADX WARNING: Missing exception handler attribute for start block: B:187:0x032a */
        /* JADX WARNING: Missing exception handler attribute for start block: B:189:0x0336 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:191:0x0342 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:193:0x034e */
        /* JADX WARNING: Missing exception handler attribute for start block: B:195:0x035a */
        /* JADX WARNING: Missing exception handler attribute for start block: B:197:0x0366 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:203:0x0383 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:205:0x038d */
        /* JADX WARNING: Missing exception handler attribute for start block: B:207:0x0397 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:209:0x03a1 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:211:0x03ab */
        /* JADX WARNING: Missing exception handler attribute for start block: B:213:0x03b5 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:215:0x03bf */
        /* JADX WARNING: Missing exception handler attribute for start block: B:221:0x03da */
        /* JADX WARNING: Missing exception handler attribute for start block: B:223:0x03e4 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:225:0x03ee */
        /* JADX WARNING: Missing exception handler attribute for start block: B:227:0x03f8 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:229:0x0402 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:231:0x040c */
        /* JADX WARNING: Missing exception handler attribute for start block: B:233:0x0416 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:235:0x0420 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:237:0x042a */
        /* JADX WARNING: Missing exception handler attribute for start block: B:239:0x0434 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:241:0x043e */
        /* JADX WARNING: Missing exception handler attribute for start block: B:243:0x0448 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:249:0x0463 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:251:0x046d */
        /* JADX WARNING: Missing exception handler attribute for start block: B:253:0x0477 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:259:0x0492 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:261:0x049c */
        /* JADX WARNING: Missing exception handler attribute for start block: B:263:0x04a6 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:265:0x04b0 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:267:0x04ba */
        /* JADX WARNING: Missing exception handler attribute for start block: B:273:0x04d5 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:275:0x04df */
        /* JADX WARNING: Missing exception handler attribute for start block: B:277:0x04e9 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:279:0x04f3 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:281:0x04fd */
        /* JADX WARNING: Missing exception handler attribute for start block: B:291:0x0529 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:293:0x0533 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:55:0x00ad */
        /* JADX WARNING: Missing exception handler attribute for start block: B:61:0x00c8 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:63:0x00d2 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:65:0x00dc */
        /* JADX WARNING: Missing exception handler attribute for start block: B:67:0x00e6 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:73:0x0101 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:75:0x010b */
        /* JADX WARNING: Missing exception handler attribute for start block: B:77:0x0115 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:79:0x011f */
        /* JADX WARNING: Missing exception handler attribute for start block: B:81:0x0129 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:83:0x0133 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:85:0x013d */
        /* JADX WARNING: Missing exception handler attribute for start block: B:91:0x0158 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:93:0x0162 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:99:0x017d */
        static {
            /*
                com.moovit.tripplanner.TripPlannerTransportType[] r0 = com.moovit.tripplanner.TripPlannerTransportType.values()
                int r0 = r0.length
                int[] r0 = new int[r0]
                f41888r = r0
                r1 = 1
                com.moovit.tripplanner.TripPlannerTransportType r2 = com.moovit.tripplanner.TripPlannerTransportType.TRAM     // Catch:{ NoSuchFieldError -> 0x0012 }
                int r2 = r2.ordinal()     // Catch:{ NoSuchFieldError -> 0x0012 }
                r0[r2] = r1     // Catch:{ NoSuchFieldError -> 0x0012 }
            L_0x0012:
                r0 = 2
                int[] r2 = f41888r     // Catch:{ NoSuchFieldError -> 0x001d }
                com.moovit.tripplanner.TripPlannerTransportType r3 = com.moovit.tripplanner.TripPlannerTransportType.SUBWAY     // Catch:{ NoSuchFieldError -> 0x001d }
                int r3 = r3.ordinal()     // Catch:{ NoSuchFieldError -> 0x001d }
                r2[r3] = r0     // Catch:{ NoSuchFieldError -> 0x001d }
            L_0x001d:
                r2 = 3
                int[] r3 = f41888r     // Catch:{ NoSuchFieldError -> 0x0028 }
                com.moovit.tripplanner.TripPlannerTransportType r4 = com.moovit.tripplanner.TripPlannerTransportType.TRAIN     // Catch:{ NoSuchFieldError -> 0x0028 }
                int r4 = r4.ordinal()     // Catch:{ NoSuchFieldError -> 0x0028 }
                r3[r4] = r2     // Catch:{ NoSuchFieldError -> 0x0028 }
            L_0x0028:
                r3 = 4
                int[] r4 = f41888r     // Catch:{ NoSuchFieldError -> 0x0033 }
                com.moovit.tripplanner.TripPlannerTransportType r5 = com.moovit.tripplanner.TripPlannerTransportType.BUS     // Catch:{ NoSuchFieldError -> 0x0033 }
                int r5 = r5.ordinal()     // Catch:{ NoSuchFieldError -> 0x0033 }
                r4[r5] = r3     // Catch:{ NoSuchFieldError -> 0x0033 }
            L_0x0033:
                r4 = 5
                int[] r5 = f41888r     // Catch:{ NoSuchFieldError -> 0x003e }
                com.moovit.tripplanner.TripPlannerTransportType r6 = com.moovit.tripplanner.TripPlannerTransportType.FERRY     // Catch:{ NoSuchFieldError -> 0x003e }
                int r6 = r6.ordinal()     // Catch:{ NoSuchFieldError -> 0x003e }
                r5[r6] = r4     // Catch:{ NoSuchFieldError -> 0x003e }
            L_0x003e:
                r5 = 6
                int[] r6 = f41888r     // Catch:{ NoSuchFieldError -> 0x0049 }
                com.moovit.tripplanner.TripPlannerTransportType r7 = com.moovit.tripplanner.TripPlannerTransportType.CABLE     // Catch:{ NoSuchFieldError -> 0x0049 }
                int r7 = r7.ordinal()     // Catch:{ NoSuchFieldError -> 0x0049 }
                r6[r7] = r5     // Catch:{ NoSuchFieldError -> 0x0049 }
            L_0x0049:
                r6 = 7
                int[] r7 = f41888r     // Catch:{ NoSuchFieldError -> 0x0054 }
                com.moovit.tripplanner.TripPlannerTransportType r8 = com.moovit.tripplanner.TripPlannerTransportType.GONDOLA     // Catch:{ NoSuchFieldError -> 0x0054 }
                int r8 = r8.ordinal()     // Catch:{ NoSuchFieldError -> 0x0054 }
                r7[r8] = r6     // Catch:{ NoSuchFieldError -> 0x0054 }
            L_0x0054:
                r7 = 8
                int[] r8 = f41888r     // Catch:{ NoSuchFieldError -> 0x0060 }
                com.moovit.tripplanner.TripPlannerTransportType r9 = com.moovit.tripplanner.TripPlannerTransportType.FUNICULAR     // Catch:{ NoSuchFieldError -> 0x0060 }
                int r9 = r9.ordinal()     // Catch:{ NoSuchFieldError -> 0x0060 }
                r8[r9] = r7     // Catch:{ NoSuchFieldError -> 0x0060 }
            L_0x0060:
                r8 = 9
                int[] r9 = f41888r     // Catch:{ NoSuchFieldError -> 0x006c }
                com.moovit.tripplanner.TripPlannerTransportType r10 = com.moovit.tripplanner.TripPlannerTransportType.BICYCLE     // Catch:{ NoSuchFieldError -> 0x006c }
                int r10 = r10.ordinal()     // Catch:{ NoSuchFieldError -> 0x006c }
                r9[r10] = r8     // Catch:{ NoSuchFieldError -> 0x006c }
            L_0x006c:
                r9 = 10
                int[] r10 = f41888r     // Catch:{ NoSuchFieldError -> 0x0078 }
                com.moovit.tripplanner.TripPlannerTransportType r11 = com.moovit.tripplanner.TripPlannerTransportType.SCOOTER     // Catch:{ NoSuchFieldError -> 0x0078 }
                int r11 = r11.ordinal()     // Catch:{ NoSuchFieldError -> 0x0078 }
                r10[r11] = r9     // Catch:{ NoSuchFieldError -> 0x0078 }
            L_0x0078:
                r10 = 11
                int[] r11 = f41888r     // Catch:{ NoSuchFieldError -> 0x0084 }
                com.moovit.tripplanner.TripPlannerTransportType r12 = com.moovit.tripplanner.TripPlannerTransportType.MOPED     // Catch:{ NoSuchFieldError -> 0x0084 }
                int r12 = r12.ordinal()     // Catch:{ NoSuchFieldError -> 0x0084 }
                r11[r12] = r10     // Catch:{ NoSuchFieldError -> 0x0084 }
            L_0x0084:
                r11 = 12
                int[] r12 = f41888r     // Catch:{ NoSuchFieldError -> 0x0090 }
                com.moovit.tripplanner.TripPlannerTransportType r13 = com.moovit.tripplanner.TripPlannerTransportType.CAR     // Catch:{ NoSuchFieldError -> 0x0090 }
                int r13 = r13.ordinal()     // Catch:{ NoSuchFieldError -> 0x0090 }
                r12[r13] = r11     // Catch:{ NoSuchFieldError -> 0x0090 }
            L_0x0090:
                r12 = 13
                int[] r13 = f41888r     // Catch:{ NoSuchFieldError -> 0x009c }
                com.moovit.tripplanner.TripPlannerTransportType r14 = com.moovit.tripplanner.TripPlannerTransportType.PERSONAL_CAR     // Catch:{ NoSuchFieldError -> 0x009c }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x009c }
                r13[r14] = r12     // Catch:{ NoSuchFieldError -> 0x009c }
            L_0x009c:
                com.moovit.tripplanner.TripPlannerAlgorithmType[] r13 = com.moovit.tripplanner.TripPlannerAlgorithmType.values()
                int r13 = r13.length
                int[] r13 = new int[r13]
                f41887q = r13
                com.moovit.tripplanner.TripPlannerAlgorithmType r14 = com.moovit.tripplanner.TripPlannerAlgorithmType.FILTER     // Catch:{ NoSuchFieldError -> 0x00ad }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x00ad }
                r13[r14] = r1     // Catch:{ NoSuchFieldError -> 0x00ad }
            L_0x00ad:
                int[] r13 = f41887q     // Catch:{ NoSuchFieldError -> 0x00b7 }
                com.moovit.tripplanner.TripPlannerAlgorithmType r14 = com.moovit.tripplanner.TripPlannerAlgorithmType.PREFERRED     // Catch:{ NoSuchFieldError -> 0x00b7 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x00b7 }
                r13[r14] = r0     // Catch:{ NoSuchFieldError -> 0x00b7 }
            L_0x00b7:
                com.tranzmate.moovit.protocol.tripplanner.MVTripPlanTransportOptionPref[] r13 = com.tranzmate.moovit.protocol.tripplanner.MVTripPlanTransportOptionPref.values()
                int r13 = r13.length
                int[] r13 = new int[r13]
                f41886p = r13
                com.tranzmate.moovit.protocol.tripplanner.MVTripPlanTransportOptionPref r14 = com.tranzmate.moovit.protocol.tripplanner.MVTripPlanTransportOptionPref.BICYCLE     // Catch:{ NoSuchFieldError -> 0x00c8 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x00c8 }
                r13[r14] = r1     // Catch:{ NoSuchFieldError -> 0x00c8 }
            L_0x00c8:
                int[] r13 = f41886p     // Catch:{ NoSuchFieldError -> 0x00d2 }
                com.tranzmate.moovit.protocol.tripplanner.MVTripPlanTransportOptionPref r14 = com.tranzmate.moovit.protocol.tripplanner.MVTripPlanTransportOptionPref.SCOOTER     // Catch:{ NoSuchFieldError -> 0x00d2 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x00d2 }
                r13[r14] = r0     // Catch:{ NoSuchFieldError -> 0x00d2 }
            L_0x00d2:
                int[] r13 = f41886p     // Catch:{ NoSuchFieldError -> 0x00dc }
                com.tranzmate.moovit.protocol.tripplanner.MVTripPlanTransportOptionPref r14 = com.tranzmate.moovit.protocol.tripplanner.MVTripPlanTransportOptionPref.MOPED     // Catch:{ NoSuchFieldError -> 0x00dc }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x00dc }
                r13[r14] = r2     // Catch:{ NoSuchFieldError -> 0x00dc }
            L_0x00dc:
                int[] r13 = f41886p     // Catch:{ NoSuchFieldError -> 0x00e6 }
                com.tranzmate.moovit.protocol.tripplanner.MVTripPlanTransportOptionPref r14 = com.tranzmate.moovit.protocol.tripplanner.MVTripPlanTransportOptionPref.CAR     // Catch:{ NoSuchFieldError -> 0x00e6 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x00e6 }
                r13[r14] = r3     // Catch:{ NoSuchFieldError -> 0x00e6 }
            L_0x00e6:
                int[] r13 = f41886p     // Catch:{ NoSuchFieldError -> 0x00f0 }
                com.tranzmate.moovit.protocol.tripplanner.MVTripPlanTransportOptionPref r14 = com.tranzmate.moovit.protocol.tripplanner.MVTripPlanTransportOptionPref.PERSONAL_CAR     // Catch:{ NoSuchFieldError -> 0x00f0 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x00f0 }
                r13[r14] = r4     // Catch:{ NoSuchFieldError -> 0x00f0 }
            L_0x00f0:
                com.tranzmate.moovit.protocol.common.MVRouteType[] r13 = com.tranzmate.moovit.protocol.common.MVRouteType.values()
                int r13 = r13.length
                int[] r13 = new int[r13]
                f41885o = r13
                com.tranzmate.moovit.protocol.common.MVRouteType r14 = com.tranzmate.moovit.protocol.common.MVRouteType.Tram     // Catch:{ NoSuchFieldError -> 0x0101 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x0101 }
                r13[r14] = r1     // Catch:{ NoSuchFieldError -> 0x0101 }
            L_0x0101:
                int[] r13 = f41885o     // Catch:{ NoSuchFieldError -> 0x010b }
                com.tranzmate.moovit.protocol.common.MVRouteType r14 = com.tranzmate.moovit.protocol.common.MVRouteType.Subway     // Catch:{ NoSuchFieldError -> 0x010b }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x010b }
                r13[r14] = r0     // Catch:{ NoSuchFieldError -> 0x010b }
            L_0x010b:
                int[] r13 = f41885o     // Catch:{ NoSuchFieldError -> 0x0115 }
                com.tranzmate.moovit.protocol.common.MVRouteType r14 = com.tranzmate.moovit.protocol.common.MVRouteType.Rail     // Catch:{ NoSuchFieldError -> 0x0115 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x0115 }
                r13[r14] = r2     // Catch:{ NoSuchFieldError -> 0x0115 }
            L_0x0115:
                int[] r13 = f41885o     // Catch:{ NoSuchFieldError -> 0x011f }
                com.tranzmate.moovit.protocol.common.MVRouteType r14 = com.tranzmate.moovit.protocol.common.MVRouteType.Bus     // Catch:{ NoSuchFieldError -> 0x011f }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x011f }
                r13[r14] = r3     // Catch:{ NoSuchFieldError -> 0x011f }
            L_0x011f:
                int[] r13 = f41885o     // Catch:{ NoSuchFieldError -> 0x0129 }
                com.tranzmate.moovit.protocol.common.MVRouteType r14 = com.tranzmate.moovit.protocol.common.MVRouteType.Ferry     // Catch:{ NoSuchFieldError -> 0x0129 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x0129 }
                r13[r14] = r4     // Catch:{ NoSuchFieldError -> 0x0129 }
            L_0x0129:
                int[] r13 = f41885o     // Catch:{ NoSuchFieldError -> 0x0133 }
                com.tranzmate.moovit.protocol.common.MVRouteType r14 = com.tranzmate.moovit.protocol.common.MVRouteType.Cable     // Catch:{ NoSuchFieldError -> 0x0133 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x0133 }
                r13[r14] = r5     // Catch:{ NoSuchFieldError -> 0x0133 }
            L_0x0133:
                int[] r13 = f41885o     // Catch:{ NoSuchFieldError -> 0x013d }
                com.tranzmate.moovit.protocol.common.MVRouteType r14 = com.tranzmate.moovit.protocol.common.MVRouteType.Gondola     // Catch:{ NoSuchFieldError -> 0x013d }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x013d }
                r13[r14] = r6     // Catch:{ NoSuchFieldError -> 0x013d }
            L_0x013d:
                int[] r13 = f41885o     // Catch:{ NoSuchFieldError -> 0x0147 }
                com.tranzmate.moovit.protocol.common.MVRouteType r14 = com.tranzmate.moovit.protocol.common.MVRouteType.Funicular     // Catch:{ NoSuchFieldError -> 0x0147 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x0147 }
                r13[r14] = r7     // Catch:{ NoSuchFieldError -> 0x0147 }
            L_0x0147:
                com.tranzmate.moovit.protocol.tripplanner.MVTripPlanPref[] r13 = com.tranzmate.moovit.protocol.tripplanner.MVTripPlanPref.values()
                int r13 = r13.length
                int[] r13 = new int[r13]
                f41884n = r13
                com.tranzmate.moovit.protocol.tripplanner.MVTripPlanPref r14 = com.tranzmate.moovit.protocol.tripplanner.MVTripPlanPref.LeastWalking     // Catch:{ NoSuchFieldError -> 0x0158 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x0158 }
                r13[r14] = r1     // Catch:{ NoSuchFieldError -> 0x0158 }
            L_0x0158:
                int[] r13 = f41884n     // Catch:{ NoSuchFieldError -> 0x0162 }
                com.tranzmate.moovit.protocol.tripplanner.MVTripPlanPref r14 = com.tranzmate.moovit.protocol.tripplanner.MVTripPlanPref.Fastest     // Catch:{ NoSuchFieldError -> 0x0162 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x0162 }
                r13[r14] = r0     // Catch:{ NoSuchFieldError -> 0x0162 }
            L_0x0162:
                int[] r13 = f41884n     // Catch:{ NoSuchFieldError -> 0x016c }
                com.tranzmate.moovit.protocol.tripplanner.MVTripPlanPref r14 = com.tranzmate.moovit.protocol.tripplanner.MVTripPlanPref.LeastTransfers     // Catch:{ NoSuchFieldError -> 0x016c }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x016c }
                r13[r14] = r2     // Catch:{ NoSuchFieldError -> 0x016c }
            L_0x016c:
                com.moovit.tripplanner.TripPlannerRouteType[] r13 = com.moovit.tripplanner.TripPlannerRouteType.values()
                int r13 = r13.length
                int[] r13 = new int[r13]
                f41883m = r13
                com.moovit.tripplanner.TripPlannerRouteType r14 = com.moovit.tripplanner.TripPlannerRouteType.LEAST_WALKING     // Catch:{ NoSuchFieldError -> 0x017d }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x017d }
                r13[r14] = r1     // Catch:{ NoSuchFieldError -> 0x017d }
            L_0x017d:
                int[] r13 = f41883m     // Catch:{ NoSuchFieldError -> 0x0187 }
                com.moovit.tripplanner.TripPlannerRouteType r14 = com.moovit.tripplanner.TripPlannerRouteType.LEAST_TRANSFERS     // Catch:{ NoSuchFieldError -> 0x0187 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x0187 }
                r13[r14] = r0     // Catch:{ NoSuchFieldError -> 0x0187 }
            L_0x0187:
                int[] r13 = f41883m     // Catch:{ NoSuchFieldError -> 0x0191 }
                com.moovit.tripplanner.TripPlannerRouteType r14 = com.moovit.tripplanner.TripPlannerRouteType.FASTEST     // Catch:{ NoSuchFieldError -> 0x0191 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x0191 }
                r13[r14] = r2     // Catch:{ NoSuchFieldError -> 0x0191 }
            L_0x0191:
                com.tranzmate.moovit.protocol.tripplanner.MVTimeType[] r13 = com.tranzmate.moovit.protocol.tripplanner.MVTimeType.values()
                int r13 = r13.length
                int[] r13 = new int[r13]
                f41882l = r13
                com.tranzmate.moovit.protocol.tripplanner.MVTimeType r14 = com.tranzmate.moovit.protocol.tripplanner.MVTimeType.Arrival     // Catch:{ NoSuchFieldError -> 0x01a2 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x01a2 }
                r13[r14] = r1     // Catch:{ NoSuchFieldError -> 0x01a2 }
            L_0x01a2:
                int[] r13 = f41882l     // Catch:{ NoSuchFieldError -> 0x01ac }
                com.tranzmate.moovit.protocol.tripplanner.MVTimeType r14 = com.tranzmate.moovit.protocol.tripplanner.MVTimeType.Departure     // Catch:{ NoSuchFieldError -> 0x01ac }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x01ac }
                r13[r14] = r0     // Catch:{ NoSuchFieldError -> 0x01ac }
            L_0x01ac:
                int[] r13 = f41882l     // Catch:{ NoSuchFieldError -> 0x01b6 }
                com.tranzmate.moovit.protocol.tripplanner.MVTimeType r14 = com.tranzmate.moovit.protocol.tripplanner.MVTimeType.Last     // Catch:{ NoSuchFieldError -> 0x01b6 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x01b6 }
                r13[r14] = r2     // Catch:{ NoSuchFieldError -> 0x01b6 }
            L_0x01b6:
                com.moovit.tripplanner.TripPlannerTime$Type[] r13 = com.moovit.tripplanner.TripPlannerTime.Type.values()
                int r13 = r13.length
                int[] r13 = new int[r13]
                f41881k = r13
                com.moovit.tripplanner.TripPlannerTime$Type r14 = com.moovit.tripplanner.TripPlannerTime.Type.ARRIVE     // Catch:{ NoSuchFieldError -> 0x01c7 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x01c7 }
                r13[r14] = r1     // Catch:{ NoSuchFieldError -> 0x01c7 }
            L_0x01c7:
                int[] r13 = f41881k     // Catch:{ NoSuchFieldError -> 0x01d1 }
                com.moovit.tripplanner.TripPlannerTime$Type r14 = com.moovit.tripplanner.TripPlannerTime.Type.DEPART     // Catch:{ NoSuchFieldError -> 0x01d1 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x01d1 }
                r13[r14] = r0     // Catch:{ NoSuchFieldError -> 0x01d1 }
            L_0x01d1:
                int[] r13 = f41881k     // Catch:{ NoSuchFieldError -> 0x01db }
                com.moovit.tripplanner.TripPlannerTime$Type r14 = com.moovit.tripplanner.TripPlannerTime.Type.LAST     // Catch:{ NoSuchFieldError -> 0x01db }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x01db }
                r13[r14] = r2     // Catch:{ NoSuchFieldError -> 0x01db }
            L_0x01db:
                com.tranzmate.moovit.protocol.tripplanner.MVSectionType[] r13 = com.tranzmate.moovit.protocol.tripplanner.MVSectionType.values()
                int r13 = r13.length
                int[] r13 = new int[r13]
                f41880j = r13
                com.tranzmate.moovit.protocol.tripplanner.MVSectionType r14 = com.tranzmate.moovit.protocol.tripplanner.MVSectionType.WALK_ONLY     // Catch:{ NoSuchFieldError -> 0x01ec }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x01ec }
                r13[r14] = r1     // Catch:{ NoSuchFieldError -> 0x01ec }
            L_0x01ec:
                int[] r13 = f41880j     // Catch:{ NoSuchFieldError -> 0x01f6 }
                com.tranzmate.moovit.protocol.tripplanner.MVSectionType r14 = com.tranzmate.moovit.protocol.tripplanner.MVSectionType.WALK_AND_RIDE     // Catch:{ NoSuchFieldError -> 0x01f6 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x01f6 }
                r13[r14] = r0     // Catch:{ NoSuchFieldError -> 0x01f6 }
            L_0x01f6:
                int[] r13 = f41880j     // Catch:{ NoSuchFieldError -> 0x0200 }
                com.tranzmate.moovit.protocol.tripplanner.MVSectionType r14 = com.tranzmate.moovit.protocol.tripplanner.MVSectionType.CARPOOL     // Catch:{ NoSuchFieldError -> 0x0200 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x0200 }
                r13[r14] = r2     // Catch:{ NoSuchFieldError -> 0x0200 }
            L_0x0200:
                int[] r13 = f41880j     // Catch:{ NoSuchFieldError -> 0x020a }
                com.tranzmate.moovit.protocol.tripplanner.MVSectionType r14 = com.tranzmate.moovit.protocol.tripplanner.MVSectionType.ROUTES_WITH_BIKE     // Catch:{ NoSuchFieldError -> 0x020a }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x020a }
                r13[r14] = r3     // Catch:{ NoSuchFieldError -> 0x020a }
            L_0x020a:
                int[] r13 = f41880j     // Catch:{ NoSuchFieldError -> 0x0214 }
                com.tranzmate.moovit.protocol.tripplanner.MVSectionType r14 = com.tranzmate.moovit.protocol.tripplanner.MVSectionType.ROUTES_WITH_RENTAL_BIKE     // Catch:{ NoSuchFieldError -> 0x0214 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x0214 }
                r13[r14] = r4     // Catch:{ NoSuchFieldError -> 0x0214 }
            L_0x0214:
                int[] r13 = f41880j     // Catch:{ NoSuchFieldError -> 0x021e }
                com.tranzmate.moovit.protocol.tripplanner.MVSectionType r14 = com.tranzmate.moovit.protocol.tripplanner.MVSectionType.EVENT     // Catch:{ NoSuchFieldError -> 0x021e }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x021e }
                r13[r14] = r5     // Catch:{ NoSuchFieldError -> 0x021e }
            L_0x021e:
                int[] r13 = f41880j     // Catch:{ NoSuchFieldError -> 0x0228 }
                com.tranzmate.moovit.protocol.tripplanner.MVSectionType r14 = com.tranzmate.moovit.protocol.tripplanner.MVSectionType.NO_GROUPING     // Catch:{ NoSuchFieldError -> 0x0228 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x0228 }
                r13[r14] = r6     // Catch:{ NoSuchFieldError -> 0x0228 }
            L_0x0228:
                int[] r13 = f41880j     // Catch:{ NoSuchFieldError -> 0x0232 }
                com.tranzmate.moovit.protocol.tripplanner.MVSectionType r14 = com.tranzmate.moovit.protocol.tripplanner.MVSectionType.UNDEFINED     // Catch:{ NoSuchFieldError -> 0x0232 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x0232 }
                r13[r14] = r7     // Catch:{ NoSuchFieldError -> 0x0232 }
            L_0x0232:
                com.tranzmate.moovit.protocol.tripplanner.MVSectionSortType[] r13 = com.tranzmate.moovit.protocol.tripplanner.MVSectionSortType.values()
                int r13 = r13.length
                int[] r13 = new int[r13]
                f41879i = r13
                com.tranzmate.moovit.protocol.tripplanner.MVSectionSortType r14 = com.tranzmate.moovit.protocol.tripplanner.MVSectionSortType.NO_CLIENT_SORTING     // Catch:{ NoSuchFieldError -> 0x0243 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x0243 }
                r13[r14] = r1     // Catch:{ NoSuchFieldError -> 0x0243 }
            L_0x0243:
                int[] r13 = f41879i     // Catch:{ NoSuchFieldError -> 0x024d }
                com.tranzmate.moovit.protocol.tripplanner.MVSectionSortType r14 = com.tranzmate.moovit.protocol.tripplanner.MVSectionSortType.PRICE     // Catch:{ NoSuchFieldError -> 0x024d }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x024d }
                r13[r14] = r0     // Catch:{ NoSuchFieldError -> 0x024d }
            L_0x024d:
                int[] r13 = f41879i     // Catch:{ NoSuchFieldError -> 0x0257 }
                com.tranzmate.moovit.protocol.tripplanner.MVSectionSortType r14 = com.tranzmate.moovit.protocol.tripplanner.MVSectionSortType.DURATION     // Catch:{ NoSuchFieldError -> 0x0257 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x0257 }
                r13[r14] = r2     // Catch:{ NoSuchFieldError -> 0x0257 }
            L_0x0257:
                int[] r13 = f41879i     // Catch:{ NoSuchFieldError -> 0x0261 }
                com.tranzmate.moovit.protocol.tripplanner.MVSectionSortType r14 = com.tranzmate.moovit.protocol.tripplanner.MVSectionSortType.CO2     // Catch:{ NoSuchFieldError -> 0x0261 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x0261 }
                r13[r14] = r3     // Catch:{ NoSuchFieldError -> 0x0261 }
            L_0x0261:
                int[] r13 = f41879i     // Catch:{ NoSuchFieldError -> 0x026b }
                com.tranzmate.moovit.protocol.tripplanner.MVSectionSortType r14 = com.tranzmate.moovit.protocol.tripplanner.MVSectionSortType.LEAST_WALKING     // Catch:{ NoSuchFieldError -> 0x026b }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x026b }
                r13[r14] = r4     // Catch:{ NoSuchFieldError -> 0x026b }
            L_0x026b:
                int[] r13 = f41879i     // Catch:{ NoSuchFieldError -> 0x0275 }
                com.tranzmate.moovit.protocol.tripplanner.MVSectionSortType r14 = com.tranzmate.moovit.protocol.tripplanner.MVSectionSortType.LEAST_TRANSFERS     // Catch:{ NoSuchFieldError -> 0x0275 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x0275 }
                r13[r14] = r5     // Catch:{ NoSuchFieldError -> 0x0275 }
            L_0x0275:
                int[] r13 = f41879i     // Catch:{ NoSuchFieldError -> 0x027f }
                com.tranzmate.moovit.protocol.tripplanner.MVSectionSortType r14 = com.tranzmate.moovit.protocol.tripplanner.MVSectionSortType.EARLIEST_DEPARTURE     // Catch:{ NoSuchFieldError -> 0x027f }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x027f }
                r13[r14] = r6     // Catch:{ NoSuchFieldError -> 0x027f }
            L_0x027f:
                int[] r13 = f41879i     // Catch:{ NoSuchFieldError -> 0x0289 }
                com.tranzmate.moovit.protocol.tripplanner.MVSectionSortType r14 = com.tranzmate.moovit.protocol.tripplanner.MVSectionSortType.EARLIEST_ARRIVAL     // Catch:{ NoSuchFieldError -> 0x0289 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x0289 }
                r13[r14] = r7     // Catch:{ NoSuchFieldError -> 0x0289 }
            L_0x0289:
                com.moovit.itinerary.model.TurnInstruction$Direction[] r13 = com.moovit.itinerary.model.TurnInstruction.Direction.values()
                int r13 = r13.length
                int[] r13 = new int[r13]
                f41878h = r13
                com.moovit.itinerary.model.TurnInstruction$Direction r14 = com.moovit.itinerary.model.TurnInstruction.Direction.DEPART     // Catch:{ NoSuchFieldError -> 0x029a }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x029a }
                r13[r14] = r1     // Catch:{ NoSuchFieldError -> 0x029a }
            L_0x029a:
                int[] r13 = f41878h     // Catch:{ NoSuchFieldError -> 0x02a4 }
                com.moovit.itinerary.model.TurnInstruction$Direction r14 = com.moovit.itinerary.model.TurnInstruction.Direction.HARD_LEFT     // Catch:{ NoSuchFieldError -> 0x02a4 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x02a4 }
                r13[r14] = r0     // Catch:{ NoSuchFieldError -> 0x02a4 }
            L_0x02a4:
                int[] r13 = f41878h     // Catch:{ NoSuchFieldError -> 0x02ae }
                com.moovit.itinerary.model.TurnInstruction$Direction r14 = com.moovit.itinerary.model.TurnInstruction.Direction.LEFT     // Catch:{ NoSuchFieldError -> 0x02ae }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x02ae }
                r13[r14] = r2     // Catch:{ NoSuchFieldError -> 0x02ae }
            L_0x02ae:
                int[] r13 = f41878h     // Catch:{ NoSuchFieldError -> 0x02b8 }
                com.moovit.itinerary.model.TurnInstruction$Direction r14 = com.moovit.itinerary.model.TurnInstruction.Direction.SLIGHTLY_LEFT     // Catch:{ NoSuchFieldError -> 0x02b8 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x02b8 }
                r13[r14] = r3     // Catch:{ NoSuchFieldError -> 0x02b8 }
            L_0x02b8:
                int[] r13 = f41878h     // Catch:{ NoSuchFieldError -> 0x02c2 }
                com.moovit.itinerary.model.TurnInstruction$Direction r14 = com.moovit.itinerary.model.TurnInstruction.Direction.CONTINUE     // Catch:{ NoSuchFieldError -> 0x02c2 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x02c2 }
                r13[r14] = r4     // Catch:{ NoSuchFieldError -> 0x02c2 }
            L_0x02c2:
                int[] r13 = f41878h     // Catch:{ NoSuchFieldError -> 0x02cc }
                com.moovit.itinerary.model.TurnInstruction$Direction r14 = com.moovit.itinerary.model.TurnInstruction.Direction.SLIGHTLY_RIGHT     // Catch:{ NoSuchFieldError -> 0x02cc }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x02cc }
                r13[r14] = r5     // Catch:{ NoSuchFieldError -> 0x02cc }
            L_0x02cc:
                int[] r13 = f41878h     // Catch:{ NoSuchFieldError -> 0x02d6 }
                com.moovit.itinerary.model.TurnInstruction$Direction r14 = com.moovit.itinerary.model.TurnInstruction.Direction.RIGHT     // Catch:{ NoSuchFieldError -> 0x02d6 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x02d6 }
                r13[r14] = r6     // Catch:{ NoSuchFieldError -> 0x02d6 }
            L_0x02d6:
                int[] r13 = f41878h     // Catch:{ NoSuchFieldError -> 0x02e0 }
                com.moovit.itinerary.model.TurnInstruction$Direction r14 = com.moovit.itinerary.model.TurnInstruction.Direction.HARD_RIGHT     // Catch:{ NoSuchFieldError -> 0x02e0 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x02e0 }
                r13[r14] = r7     // Catch:{ NoSuchFieldError -> 0x02e0 }
            L_0x02e0:
                int[] r13 = f41878h     // Catch:{ NoSuchFieldError -> 0x02ea }
                com.moovit.itinerary.model.TurnInstruction$Direction r14 = com.moovit.itinerary.model.TurnInstruction.Direction.CIRCLE_CLOCKWISE     // Catch:{ NoSuchFieldError -> 0x02ea }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x02ea }
                r13[r14] = r8     // Catch:{ NoSuchFieldError -> 0x02ea }
            L_0x02ea:
                int[] r13 = f41878h     // Catch:{ NoSuchFieldError -> 0x02f4 }
                com.moovit.itinerary.model.TurnInstruction$Direction r14 = com.moovit.itinerary.model.TurnInstruction.Direction.CIRCLE_COUNTERCLOCKWISE     // Catch:{ NoSuchFieldError -> 0x02f4 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x02f4 }
                r13[r14] = r9     // Catch:{ NoSuchFieldError -> 0x02f4 }
            L_0x02f4:
                int[] r13 = f41878h     // Catch:{ NoSuchFieldError -> 0x02fe }
                com.moovit.itinerary.model.TurnInstruction$Direction r14 = com.moovit.itinerary.model.TurnInstruction.Direction.ELEVATOR     // Catch:{ NoSuchFieldError -> 0x02fe }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x02fe }
                r13[r14] = r10     // Catch:{ NoSuchFieldError -> 0x02fe }
            L_0x02fe:
                int[] r13 = f41878h     // Catch:{ NoSuchFieldError -> 0x0308 }
                com.moovit.itinerary.model.TurnInstruction$Direction r14 = com.moovit.itinerary.model.TurnInstruction.Direction.U_TURN_LEFT     // Catch:{ NoSuchFieldError -> 0x0308 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x0308 }
                r13[r14] = r11     // Catch:{ NoSuchFieldError -> 0x0308 }
            L_0x0308:
                int[] r13 = f41878h     // Catch:{ NoSuchFieldError -> 0x0312 }
                com.moovit.itinerary.model.TurnInstruction$Direction r14 = com.moovit.itinerary.model.TurnInstruction.Direction.U_TURN_RIGHT     // Catch:{ NoSuchFieldError -> 0x0312 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x0312 }
                r13[r14] = r12     // Catch:{ NoSuchFieldError -> 0x0312 }
            L_0x0312:
                int[] r13 = f41878h     // Catch:{ NoSuchFieldError -> 0x031e }
                com.moovit.itinerary.model.TurnInstruction$Direction r14 = com.moovit.itinerary.model.TurnInstruction.Direction.NORTH     // Catch:{ NoSuchFieldError -> 0x031e }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x031e }
                r15 = 14
                r13[r14] = r15     // Catch:{ NoSuchFieldError -> 0x031e }
            L_0x031e:
                int[] r13 = f41878h     // Catch:{ NoSuchFieldError -> 0x032a }
                com.moovit.itinerary.model.TurnInstruction$Direction r14 = com.moovit.itinerary.model.TurnInstruction.Direction.NORTH_EAST     // Catch:{ NoSuchFieldError -> 0x032a }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x032a }
                r15 = 15
                r13[r14] = r15     // Catch:{ NoSuchFieldError -> 0x032a }
            L_0x032a:
                int[] r13 = f41878h     // Catch:{ NoSuchFieldError -> 0x0336 }
                com.moovit.itinerary.model.TurnInstruction$Direction r14 = com.moovit.itinerary.model.TurnInstruction.Direction.EAST     // Catch:{ NoSuchFieldError -> 0x0336 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x0336 }
                r15 = 16
                r13[r14] = r15     // Catch:{ NoSuchFieldError -> 0x0336 }
            L_0x0336:
                int[] r13 = f41878h     // Catch:{ NoSuchFieldError -> 0x0342 }
                com.moovit.itinerary.model.TurnInstruction$Direction r14 = com.moovit.itinerary.model.TurnInstruction.Direction.SOUTH_EAST     // Catch:{ NoSuchFieldError -> 0x0342 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x0342 }
                r15 = 17
                r13[r14] = r15     // Catch:{ NoSuchFieldError -> 0x0342 }
            L_0x0342:
                int[] r13 = f41878h     // Catch:{ NoSuchFieldError -> 0x034e }
                com.moovit.itinerary.model.TurnInstruction$Direction r14 = com.moovit.itinerary.model.TurnInstruction.Direction.SOUTH     // Catch:{ NoSuchFieldError -> 0x034e }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x034e }
                r15 = 18
                r13[r14] = r15     // Catch:{ NoSuchFieldError -> 0x034e }
            L_0x034e:
                int[] r13 = f41878h     // Catch:{ NoSuchFieldError -> 0x035a }
                com.moovit.itinerary.model.TurnInstruction$Direction r14 = com.moovit.itinerary.model.TurnInstruction.Direction.SOUTH_WEST     // Catch:{ NoSuchFieldError -> 0x035a }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x035a }
                r15 = 19
                r13[r14] = r15     // Catch:{ NoSuchFieldError -> 0x035a }
            L_0x035a:
                int[] r13 = f41878h     // Catch:{ NoSuchFieldError -> 0x0366 }
                com.moovit.itinerary.model.TurnInstruction$Direction r14 = com.moovit.itinerary.model.TurnInstruction.Direction.WEST     // Catch:{ NoSuchFieldError -> 0x0366 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x0366 }
                r15 = 20
                r13[r14] = r15     // Catch:{ NoSuchFieldError -> 0x0366 }
            L_0x0366:
                int[] r13 = f41878h     // Catch:{ NoSuchFieldError -> 0x0372 }
                com.moovit.itinerary.model.TurnInstruction$Direction r14 = com.moovit.itinerary.model.TurnInstruction.Direction.NORTH_WEST     // Catch:{ NoSuchFieldError -> 0x0372 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x0372 }
                r15 = 21
                r13[r14] = r15     // Catch:{ NoSuchFieldError -> 0x0372 }
            L_0x0372:
                com.tranzmate.moovit.protocol.tripplanner.MVAbsoluteDirection[] r13 = com.tranzmate.moovit.protocol.tripplanner.MVAbsoluteDirection.values()
                int r13 = r13.length
                int[] r13 = new int[r13]
                f41877g = r13
                com.tranzmate.moovit.protocol.tripplanner.MVAbsoluteDirection r14 = com.tranzmate.moovit.protocol.tripplanner.MVAbsoluteDirection.North     // Catch:{ NoSuchFieldError -> 0x0383 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x0383 }
                r13[r14] = r1     // Catch:{ NoSuchFieldError -> 0x0383 }
            L_0x0383:
                int[] r13 = f41877g     // Catch:{ NoSuchFieldError -> 0x038d }
                com.tranzmate.moovit.protocol.tripplanner.MVAbsoluteDirection r14 = com.tranzmate.moovit.protocol.tripplanner.MVAbsoluteDirection.Northeast     // Catch:{ NoSuchFieldError -> 0x038d }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x038d }
                r13[r14] = r0     // Catch:{ NoSuchFieldError -> 0x038d }
            L_0x038d:
                int[] r13 = f41877g     // Catch:{ NoSuchFieldError -> 0x0397 }
                com.tranzmate.moovit.protocol.tripplanner.MVAbsoluteDirection r14 = com.tranzmate.moovit.protocol.tripplanner.MVAbsoluteDirection.east     // Catch:{ NoSuchFieldError -> 0x0397 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x0397 }
                r13[r14] = r2     // Catch:{ NoSuchFieldError -> 0x0397 }
            L_0x0397:
                int[] r13 = f41877g     // Catch:{ NoSuchFieldError -> 0x03a1 }
                com.tranzmate.moovit.protocol.tripplanner.MVAbsoluteDirection r14 = com.tranzmate.moovit.protocol.tripplanner.MVAbsoluteDirection.Southeast     // Catch:{ NoSuchFieldError -> 0x03a1 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x03a1 }
                r13[r14] = r3     // Catch:{ NoSuchFieldError -> 0x03a1 }
            L_0x03a1:
                int[] r13 = f41877g     // Catch:{ NoSuchFieldError -> 0x03ab }
                com.tranzmate.moovit.protocol.tripplanner.MVAbsoluteDirection r14 = com.tranzmate.moovit.protocol.tripplanner.MVAbsoluteDirection.South     // Catch:{ NoSuchFieldError -> 0x03ab }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x03ab }
                r13[r14] = r4     // Catch:{ NoSuchFieldError -> 0x03ab }
            L_0x03ab:
                int[] r13 = f41877g     // Catch:{ NoSuchFieldError -> 0x03b5 }
                com.tranzmate.moovit.protocol.tripplanner.MVAbsoluteDirection r14 = com.tranzmate.moovit.protocol.tripplanner.MVAbsoluteDirection.Southwest     // Catch:{ NoSuchFieldError -> 0x03b5 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x03b5 }
                r13[r14] = r5     // Catch:{ NoSuchFieldError -> 0x03b5 }
            L_0x03b5:
                int[] r13 = f41877g     // Catch:{ NoSuchFieldError -> 0x03bf }
                com.tranzmate.moovit.protocol.tripplanner.MVAbsoluteDirection r14 = com.tranzmate.moovit.protocol.tripplanner.MVAbsoluteDirection.West     // Catch:{ NoSuchFieldError -> 0x03bf }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x03bf }
                r13[r14] = r6     // Catch:{ NoSuchFieldError -> 0x03bf }
            L_0x03bf:
                int[] r13 = f41877g     // Catch:{ NoSuchFieldError -> 0x03c9 }
                com.tranzmate.moovit.protocol.tripplanner.MVAbsoluteDirection r14 = com.tranzmate.moovit.protocol.tripplanner.MVAbsoluteDirection.Northwest     // Catch:{ NoSuchFieldError -> 0x03c9 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x03c9 }
                r13[r14] = r7     // Catch:{ NoSuchFieldError -> 0x03c9 }
            L_0x03c9:
                com.tranzmate.moovit.protocol.tripplanner.MVRelativeDirection[] r13 = com.tranzmate.moovit.protocol.tripplanner.MVRelativeDirection.values()
                int r13 = r13.length
                int[] r13 = new int[r13]
                f41876f = r13
                com.tranzmate.moovit.protocol.tripplanner.MVRelativeDirection r14 = com.tranzmate.moovit.protocol.tripplanner.MVRelativeDirection.Depart     // Catch:{ NoSuchFieldError -> 0x03da }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x03da }
                r13[r14] = r1     // Catch:{ NoSuchFieldError -> 0x03da }
            L_0x03da:
                int[] r13 = f41876f     // Catch:{ NoSuchFieldError -> 0x03e4 }
                com.tranzmate.moovit.protocol.tripplanner.MVRelativeDirection r14 = com.tranzmate.moovit.protocol.tripplanner.MVRelativeDirection.HardLeft     // Catch:{ NoSuchFieldError -> 0x03e4 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x03e4 }
                r13[r14] = r0     // Catch:{ NoSuchFieldError -> 0x03e4 }
            L_0x03e4:
                int[] r13 = f41876f     // Catch:{ NoSuchFieldError -> 0x03ee }
                com.tranzmate.moovit.protocol.tripplanner.MVRelativeDirection r14 = com.tranzmate.moovit.protocol.tripplanner.MVRelativeDirection.Left     // Catch:{ NoSuchFieldError -> 0x03ee }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x03ee }
                r13[r14] = r2     // Catch:{ NoSuchFieldError -> 0x03ee }
            L_0x03ee:
                int[] r13 = f41876f     // Catch:{ NoSuchFieldError -> 0x03f8 }
                com.tranzmate.moovit.protocol.tripplanner.MVRelativeDirection r14 = com.tranzmate.moovit.protocol.tripplanner.MVRelativeDirection.SlightlyLeft     // Catch:{ NoSuchFieldError -> 0x03f8 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x03f8 }
                r13[r14] = r3     // Catch:{ NoSuchFieldError -> 0x03f8 }
            L_0x03f8:
                int[] r13 = f41876f     // Catch:{ NoSuchFieldError -> 0x0402 }
                com.tranzmate.moovit.protocol.tripplanner.MVRelativeDirection r14 = com.tranzmate.moovit.protocol.tripplanner.MVRelativeDirection.Continue     // Catch:{ NoSuchFieldError -> 0x0402 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x0402 }
                r13[r14] = r4     // Catch:{ NoSuchFieldError -> 0x0402 }
            L_0x0402:
                int[] r13 = f41876f     // Catch:{ NoSuchFieldError -> 0x040c }
                com.tranzmate.moovit.protocol.tripplanner.MVRelativeDirection r14 = com.tranzmate.moovit.protocol.tripplanner.MVRelativeDirection.SlightlyRight     // Catch:{ NoSuchFieldError -> 0x040c }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x040c }
                r13[r14] = r5     // Catch:{ NoSuchFieldError -> 0x040c }
            L_0x040c:
                int[] r13 = f41876f     // Catch:{ NoSuchFieldError -> 0x0416 }
                com.tranzmate.moovit.protocol.tripplanner.MVRelativeDirection r14 = com.tranzmate.moovit.protocol.tripplanner.MVRelativeDirection.Right     // Catch:{ NoSuchFieldError -> 0x0416 }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x0416 }
                r13[r14] = r6     // Catch:{ NoSuchFieldError -> 0x0416 }
            L_0x0416:
                int[] r6 = f41876f     // Catch:{ NoSuchFieldError -> 0x0420 }
                com.tranzmate.moovit.protocol.tripplanner.MVRelativeDirection r13 = com.tranzmate.moovit.protocol.tripplanner.MVRelativeDirection.HardRight     // Catch:{ NoSuchFieldError -> 0x0420 }
                int r13 = r13.ordinal()     // Catch:{ NoSuchFieldError -> 0x0420 }
                r6[r13] = r7     // Catch:{ NoSuchFieldError -> 0x0420 }
            L_0x0420:
                int[] r6 = f41876f     // Catch:{ NoSuchFieldError -> 0x042a }
                com.tranzmate.moovit.protocol.tripplanner.MVRelativeDirection r7 = com.tranzmate.moovit.protocol.tripplanner.MVRelativeDirection.CircleClockwise     // Catch:{ NoSuchFieldError -> 0x042a }
                int r7 = r7.ordinal()     // Catch:{ NoSuchFieldError -> 0x042a }
                r6[r7] = r8     // Catch:{ NoSuchFieldError -> 0x042a }
            L_0x042a:
                int[] r6 = f41876f     // Catch:{ NoSuchFieldError -> 0x0434 }
                com.tranzmate.moovit.protocol.tripplanner.MVRelativeDirection r7 = com.tranzmate.moovit.protocol.tripplanner.MVRelativeDirection.CircleCounterclockwise     // Catch:{ NoSuchFieldError -> 0x0434 }
                int r7 = r7.ordinal()     // Catch:{ NoSuchFieldError -> 0x0434 }
                r6[r7] = r9     // Catch:{ NoSuchFieldError -> 0x0434 }
            L_0x0434:
                int[] r6 = f41876f     // Catch:{ NoSuchFieldError -> 0x043e }
                com.tranzmate.moovit.protocol.tripplanner.MVRelativeDirection r7 = com.tranzmate.moovit.protocol.tripplanner.MVRelativeDirection.Elevator     // Catch:{ NoSuchFieldError -> 0x043e }
                int r7 = r7.ordinal()     // Catch:{ NoSuchFieldError -> 0x043e }
                r6[r7] = r10     // Catch:{ NoSuchFieldError -> 0x043e }
            L_0x043e:
                int[] r6 = f41876f     // Catch:{ NoSuchFieldError -> 0x0448 }
                com.tranzmate.moovit.protocol.tripplanner.MVRelativeDirection r7 = com.tranzmate.moovit.protocol.tripplanner.MVRelativeDirection.UturnLeft     // Catch:{ NoSuchFieldError -> 0x0448 }
                int r7 = r7.ordinal()     // Catch:{ NoSuchFieldError -> 0x0448 }
                r6[r7] = r11     // Catch:{ NoSuchFieldError -> 0x0448 }
            L_0x0448:
                int[] r6 = f41876f     // Catch:{ NoSuchFieldError -> 0x0452 }
                com.tranzmate.moovit.protocol.tripplanner.MVRelativeDirection r7 = com.tranzmate.moovit.protocol.tripplanner.MVRelativeDirection.UturnRight     // Catch:{ NoSuchFieldError -> 0x0452 }
                int r7 = r7.ordinal()     // Catch:{ NoSuchFieldError -> 0x0452 }
                r6[r7] = r12     // Catch:{ NoSuchFieldError -> 0x0452 }
            L_0x0452:
                com.tranzmate.moovit.protocol.tripplanner.MVGroupType[] r6 = com.tranzmate.moovit.protocol.tripplanner.MVGroupType.values()
                int r6 = r6.length
                int[] r6 = new int[r6]
                f41875e = r6
                com.tranzmate.moovit.protocol.tripplanner.MVGroupType r7 = com.tranzmate.moovit.protocol.tripplanner.MVGroupType.NONE     // Catch:{ NoSuchFieldError -> 0x0463 }
                int r7 = r7.ordinal()     // Catch:{ NoSuchFieldError -> 0x0463 }
                r6[r7] = r1     // Catch:{ NoSuchFieldError -> 0x0463 }
            L_0x0463:
                int[] r6 = f41875e     // Catch:{ NoSuchFieldError -> 0x046d }
                com.tranzmate.moovit.protocol.tripplanner.MVGroupType r7 = com.tranzmate.moovit.protocol.tripplanner.MVGroupType.NO_GROUPING     // Catch:{ NoSuchFieldError -> 0x046d }
                int r7 = r7.ordinal()     // Catch:{ NoSuchFieldError -> 0x046d }
                r6[r7] = r0     // Catch:{ NoSuchFieldError -> 0x046d }
            L_0x046d:
                int[] r6 = f41875e     // Catch:{ NoSuchFieldError -> 0x0477 }
                com.tranzmate.moovit.protocol.tripplanner.MVGroupType r7 = com.tranzmate.moovit.protocol.tripplanner.MVGroupType.LINE_GROUPING     // Catch:{ NoSuchFieldError -> 0x0477 }
                int r7 = r7.ordinal()     // Catch:{ NoSuchFieldError -> 0x0477 }
                r6[r7] = r2     // Catch:{ NoSuchFieldError -> 0x0477 }
            L_0x0477:
                int[] r6 = f41875e     // Catch:{ NoSuchFieldError -> 0x0481 }
                com.tranzmate.moovit.protocol.tripplanner.MVGroupType r7 = com.tranzmate.moovit.protocol.tripplanner.MVGroupType.STOP_GROUPING     // Catch:{ NoSuchFieldError -> 0x0481 }
                int r7 = r7.ordinal()     // Catch:{ NoSuchFieldError -> 0x0481 }
                r6[r7] = r3     // Catch:{ NoSuchFieldError -> 0x0481 }
            L_0x0481:
                com.moovit.itinerary.model.leg.CarpoolLeg$CarpoolProvider[] r6 = com.moovit.itinerary.model.leg.CarpoolLeg.CarpoolProvider.values()
                int r6 = r6.length
                int[] r6 = new int[r6]
                f41874d = r6
                com.moovit.itinerary.model.leg.CarpoolLeg$CarpoolProvider r7 = com.moovit.itinerary.model.leg.CarpoolLeg.CarpoolProvider.MOOVIT     // Catch:{ NoSuchFieldError -> 0x0492 }
                int r7 = r7.ordinal()     // Catch:{ NoSuchFieldError -> 0x0492 }
                r6[r7] = r1     // Catch:{ NoSuchFieldError -> 0x0492 }
            L_0x0492:
                int[] r6 = f41874d     // Catch:{ NoSuchFieldError -> 0x049c }
                com.moovit.itinerary.model.leg.CarpoolLeg$CarpoolProvider r7 = com.moovit.itinerary.model.leg.CarpoolLeg.CarpoolProvider.WAZE     // Catch:{ NoSuchFieldError -> 0x049c }
                int r7 = r7.ordinal()     // Catch:{ NoSuchFieldError -> 0x049c }
                r6[r7] = r0     // Catch:{ NoSuchFieldError -> 0x049c }
            L_0x049c:
                int[] r6 = f41874d     // Catch:{ NoSuchFieldError -> 0x04a6 }
                com.moovit.itinerary.model.leg.CarpoolLeg$CarpoolProvider r7 = com.moovit.itinerary.model.leg.CarpoolLeg.CarpoolProvider.KLAXIT     // Catch:{ NoSuchFieldError -> 0x04a6 }
                int r7 = r7.ordinal()     // Catch:{ NoSuchFieldError -> 0x04a6 }
                r6[r7] = r2     // Catch:{ NoSuchFieldError -> 0x04a6 }
            L_0x04a6:
                int[] r6 = f41874d     // Catch:{ NoSuchFieldError -> 0x04b0 }
                com.moovit.itinerary.model.leg.CarpoolLeg$CarpoolProvider r7 = com.moovit.itinerary.model.leg.CarpoolLeg.CarpoolProvider.KAROS     // Catch:{ NoSuchFieldError -> 0x04b0 }
                int r7 = r7.ordinal()     // Catch:{ NoSuchFieldError -> 0x04b0 }
                r6[r7] = r3     // Catch:{ NoSuchFieldError -> 0x04b0 }
            L_0x04b0:
                int[] r6 = f41874d     // Catch:{ NoSuchFieldError -> 0x04ba }
                com.moovit.itinerary.model.leg.CarpoolLeg$CarpoolProvider r7 = com.moovit.itinerary.model.leg.CarpoolLeg.CarpoolProvider.BLABLALINES     // Catch:{ NoSuchFieldError -> 0x04ba }
                int r7 = r7.ordinal()     // Catch:{ NoSuchFieldError -> 0x04ba }
                r6[r7] = r4     // Catch:{ NoSuchFieldError -> 0x04ba }
            L_0x04ba:
                int[] r6 = f41874d     // Catch:{ NoSuchFieldError -> 0x04c4 }
                com.moovit.itinerary.model.leg.CarpoolLeg$CarpoolProvider r7 = com.moovit.itinerary.model.leg.CarpoolLeg.CarpoolProvider.BLABLA     // Catch:{ NoSuchFieldError -> 0x04c4 }
                int r7 = r7.ordinal()     // Catch:{ NoSuchFieldError -> 0x04c4 }
                r6[r7] = r5     // Catch:{ NoSuchFieldError -> 0x04c4 }
            L_0x04c4:
                com.tranzmate.moovit.protocol.tripplanner.MVCarPoolSource[] r6 = com.tranzmate.moovit.protocol.tripplanner.MVCarPoolSource.values()
                int r6 = r6.length
                int[] r6 = new int[r6]
                f41873c = r6
                com.tranzmate.moovit.protocol.tripplanner.MVCarPoolSource r7 = com.tranzmate.moovit.protocol.tripplanner.MVCarPoolSource.Moovit     // Catch:{ NoSuchFieldError -> 0x04d5 }
                int r7 = r7.ordinal()     // Catch:{ NoSuchFieldError -> 0x04d5 }
                r6[r7] = r1     // Catch:{ NoSuchFieldError -> 0x04d5 }
            L_0x04d5:
                int[] r6 = f41873c     // Catch:{ NoSuchFieldError -> 0x04df }
                com.tranzmate.moovit.protocol.tripplanner.MVCarPoolSource r7 = com.tranzmate.moovit.protocol.tripplanner.MVCarPoolSource.Waze     // Catch:{ NoSuchFieldError -> 0x04df }
                int r7 = r7.ordinal()     // Catch:{ NoSuchFieldError -> 0x04df }
                r6[r7] = r0     // Catch:{ NoSuchFieldError -> 0x04df }
            L_0x04df:
                int[] r6 = f41873c     // Catch:{ NoSuchFieldError -> 0x04e9 }
                com.tranzmate.moovit.protocol.tripplanner.MVCarPoolSource r7 = com.tranzmate.moovit.protocol.tripplanner.MVCarPoolSource.Idfm_klaxit     // Catch:{ NoSuchFieldError -> 0x04e9 }
                int r7 = r7.ordinal()     // Catch:{ NoSuchFieldError -> 0x04e9 }
                r6[r7] = r2     // Catch:{ NoSuchFieldError -> 0x04e9 }
            L_0x04e9:
                int[] r6 = f41873c     // Catch:{ NoSuchFieldError -> 0x04f3 }
                com.tranzmate.moovit.protocol.tripplanner.MVCarPoolSource r7 = com.tranzmate.moovit.protocol.tripplanner.MVCarPoolSource.Idfm_karos     // Catch:{ NoSuchFieldError -> 0x04f3 }
                int r7 = r7.ordinal()     // Catch:{ NoSuchFieldError -> 0x04f3 }
                r6[r7] = r3     // Catch:{ NoSuchFieldError -> 0x04f3 }
            L_0x04f3:
                int[] r3 = f41873c     // Catch:{ NoSuchFieldError -> 0x04fd }
                com.tranzmate.moovit.protocol.tripplanner.MVCarPoolSource r6 = com.tranzmate.moovit.protocol.tripplanner.MVCarPoolSource.Idfm_blablalines     // Catch:{ NoSuchFieldError -> 0x04fd }
                int r6 = r6.ordinal()     // Catch:{ NoSuchFieldError -> 0x04fd }
                r3[r6] = r4     // Catch:{ NoSuchFieldError -> 0x04fd }
            L_0x04fd:
                int[] r3 = f41873c     // Catch:{ NoSuchFieldError -> 0x0507 }
                com.tranzmate.moovit.protocol.tripplanner.MVCarPoolSource r4 = com.tranzmate.moovit.protocol.tripplanner.MVCarPoolSource.BlaBla     // Catch:{ NoSuchFieldError -> 0x0507 }
                int r4 = r4.ordinal()     // Catch:{ NoSuchFieldError -> 0x0507 }
                r3[r4] = r5     // Catch:{ NoSuchFieldError -> 0x0507 }
            L_0x0507:
                com.tranzmate.moovit.protocol.tripplanner.MVCarpoolRideAttributes[] r3 = com.tranzmate.moovit.protocol.tripplanner.MVCarpoolRideAttributes.values()
                int r3 = r3.length
                int[] r3 = new int[r3]
                f41872b = r3
                com.tranzmate.moovit.protocol.tripplanner.MVCarpoolRideAttributes r4 = com.tranzmate.moovit.protocol.tripplanner.MVCarpoolRideAttributes.INSTANT_BOOKING     // Catch:{ NoSuchFieldError -> 0x0518 }
                int r4 = r4.ordinal()     // Catch:{ NoSuchFieldError -> 0x0518 }
                r3[r4] = r1     // Catch:{ NoSuchFieldError -> 0x0518 }
            L_0x0518:
                com.tranzmate.moovit.protocol.tripplanner.MVCarpoolType[] r3 = com.tranzmate.moovit.protocol.tripplanner.MVCarpoolType.values()
                int r3 = r3.length
                int[] r3 = new int[r3]
                f41871a = r3
                com.tranzmate.moovit.protocol.tripplanner.MVCarpoolType r4 = com.tranzmate.moovit.protocol.tripplanner.MVCarpoolType.ANONYMOUS     // Catch:{ NoSuchFieldError -> 0x0529 }
                int r4 = r4.ordinal()     // Catch:{ NoSuchFieldError -> 0x0529 }
                r3[r4] = r1     // Catch:{ NoSuchFieldError -> 0x0529 }
            L_0x0529:
                int[] r1 = f41871a     // Catch:{ NoSuchFieldError -> 0x0533 }
                com.tranzmate.moovit.protocol.tripplanner.MVCarpoolType r3 = com.tranzmate.moovit.protocol.tripplanner.MVCarpoolType.SINGLE_DRIVER     // Catch:{ NoSuchFieldError -> 0x0533 }
                int r3 = r3.ordinal()     // Catch:{ NoSuchFieldError -> 0x0533 }
                r1[r3] = r0     // Catch:{ NoSuchFieldError -> 0x0533 }
            L_0x0533:
                int[] r0 = f41871a     // Catch:{ NoSuchFieldError -> 0x053d }
                com.tranzmate.moovit.protocol.tripplanner.MVCarpoolType r1 = com.tranzmate.moovit.protocol.tripplanner.MVCarpoolType.NEARBY_DRIVERS     // Catch:{ NoSuchFieldError -> 0x053d }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x053d }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x053d }
            L_0x053d:
                return
            */
            throw new UnsupportedOperationException("Method not decompiled: com.moovit.itinerary.C16080a.C16081a.<clinit>():void");
        }
    }

    /* renamed from: com.moovit.itinerary.a$b */
    public static class C16082b implements Leg.C16144a<MVTripPlanLeg>, C13733n<Leg, MVTripPlanLeg> {
        /* renamed from: a */
        public final Object mo39909a(CarLeg carLeg) {
            MVTime v = C16080a.m40966v(carLeg);
            MVLocationDescriptor u = C13749c.m34335u(carLeg.f41960d);
            MVLocationDescriptor u2 = C13749c.m34335u(carLeg.f41961e);
            MVTripPlanShape u3 = C16080a.m40965u(carLeg.f41962f);
            MVJourney mVJourney = new MVJourney(u, u2);
            MVCarLeg mVCarLeg = new MVCarLeg();
            mVCarLeg.time = v;
            mVCarLeg.journey = mVJourney;
            mVCarLeg.shape = u3;
            MVTripPlanLeg mVTripPlanLeg = new MVTripPlanLeg();
            mVTripPlanLeg.setField_ = MVTripPlanLeg._Fields.CAR_LEG;
            mVTripPlanLeg.value_ = mVCarLeg;
            return mVTripPlanLeg;
        }

        /* renamed from: b */
        public final Object mo39910b(WaitToMultiTransitLinesLeg waitToMultiTransitLinesLeg) {
            MVTime v = C16080a.m40966v(waitToMultiTransitLinesLeg);
            int c = C5479c.m13666c(waitToMultiTransitLinesLeg.mo48467b().f42136g);
            int c2 = C5479c.m13666c(waitToMultiTransitLinesLeg.mo48467b().f42137h);
            ArrayList<O> c3 = C13720d.m34273c(waitToMultiTransitLinesLeg.f42117b, (C13722f) null, new C18848b(3));
            MVWaitToMultiLineLeg mVWaitToMultiLineLeg = new MVWaitToMultiLineLeg();
            mVWaitToMultiLineLeg.time = v;
            mVWaitToMultiLineLeg.waitAtStopId = c;
            mVWaitToMultiLineLeg.mo34882u();
            mVWaitToMultiLineLeg.departOnStopId = c2;
            mVWaitToMultiLineLeg.mo34877q();
            mVWaitToMultiLineLeg.alternatives = c3;
            mVWaitToMultiLineLeg.primaryAlternativeIndex = (byte) waitToMultiTransitLinesLeg.f42118c;
            mVWaitToMultiLineLeg.mo34879s();
            mVWaitToMultiLineLeg.metroId = 0;
            mVWaitToMultiLineLeg.mo34878r();
            MVTripPlanLeg mVTripPlanLeg = new MVTripPlanLeg();
            mVTripPlanLeg.setField_ = MVTripPlanLeg._Fields.WAIT_TO_MULTI_LINE_LEG;
            mVTripPlanLeg.value_ = mVWaitToMultiLineLeg;
            return mVTripPlanLeg;
        }

        /* renamed from: c */
        public final Object mo39911c(TaxiLeg taxiLeg) {
            MVTaxiPrice mVTaxiPrice;
            int i = taxiLeg.f42097b.f15142b;
            MVTime v = C16080a.m40966v(taxiLeg);
            MVLocationDescriptor u = C13749c.m34335u(taxiLeg.f42100e);
            MVLocationDescriptor u2 = C13749c.m34335u(taxiLeg.f42101f);
            MVTripPlanShape u3 = C16080a.m40965u(taxiLeg.f42102g);
            int i2 = taxiLeg.f42104i;
            TaxiPrice taxiPrice = taxiLeg.f42103h;
            ArrayList<O> arrayList = null;
            if (taxiPrice != null) {
                mVTaxiPrice = C7630a.m17424b(taxiPrice);
            } else {
                mVTaxiPrice = null;
            }
            Map<String, String> map = taxiLeg.f42105j;
            if (map != null) {
                arrayList = C13720d.m34273c(map.entrySet(), (C13722f) null, new C17478e(9));
            }
            MVJourney mVJourney = new MVJourney(u, u2);
            MVTaxiLeg mVTaxiLeg = new MVTaxiLeg();
            mVTaxiLeg.time = v;
            mVTaxiLeg.journey = mVJourney;
            mVTaxiLeg.shape = u3;
            mVTaxiLeg.approxWaitingSecFromOrdering = i2;
            mVTaxiLeg.mo34561q();
            mVTaxiLeg.taxiId = i;
            mVTaxiLeg.mo34562r();
            if (mVTaxiPrice != null) {
                mVTaxiLeg.taxiPrice = mVTaxiPrice;
            }
            if (arrayList != null) {
                mVTaxiLeg.customParameters = arrayList;
            }
            MVTripPlanLeg mVTripPlanLeg = new MVTripPlanLeg();
            mVTripPlanLeg.setField_ = MVTripPlanLeg._Fields.TAXI_LEG;
            mVTripPlanLeg.value_ = mVTaxiLeg;
            return mVTripPlanLeg;
        }

        public final Object convert(Object obj) throws Exception {
            return (MVTripPlanLeg) ((Leg) obj).mo48338i0(this);
        }

        /* renamed from: d */
        public final Object mo39912d(MultiTransitLinesLeg multiTransitLinesLeg) {
            ArrayList<O> c = C13720d.m34273c(multiTransitLinesLeg.f42086b, (C13722f) null, new C19752b(8));
            MVLineWithAlternativesLeg mVLineWithAlternativesLeg = new MVLineWithAlternativesLeg();
            mVLineWithAlternativesLeg.alternativeLines = c;
            mVLineWithAlternativesLeg.primaryAlternativeIndex = (byte) multiTransitLinesLeg.f42087c;
            mVLineWithAlternativesLeg.mo34381h();
            MVTripPlanLeg mVTripPlanLeg = new MVTripPlanLeg();
            mVTripPlanLeg.setField_ = MVTripPlanLeg._Fields.LINE_WITH_ALTERNARIVES_LEG;
            mVTripPlanLeg.value_ = mVLineWithAlternativesLeg;
            return mVTripPlanLeg;
        }

        /* renamed from: e */
        public final Object mo39913e(WalkLeg walkLeg) {
            MVTime v = C16080a.m40966v(walkLeg);
            MVLocationDescriptor u = C13749c.m34335u(walkLeg.f42149d);
            MVLocationDescriptor u2 = C13749c.m34335u(walkLeg.f42150e);
            MVTripPlanShape u3 = C16080a.m40965u(walkLeg.f42151f);
            ArrayList<O> c = C13720d.m34273c(walkLeg.f42152g, (C13722f) null, new C19752b(9));
            MVJourney mVJourney = new MVJourney(u, u2);
            MVWalkLeg mVWalkLeg = new MVWalkLeg();
            mVWalkLeg.time = v;
            mVWalkLeg.journey = mVJourney;
            mVWalkLeg.shape = u3;
            mVWalkLeg.walkingInstructoins = c;
            MVTripPlanLeg mVTripPlanLeg = new MVTripPlanLeg();
            mVTripPlanLeg.setField_ = MVTripPlanLeg._Fields.WALK_LEG;
            mVTripPlanLeg.value_ = mVWalkLeg;
            return mVTripPlanLeg;
        }

        /* renamed from: f */
        public final Object mo39914f(BicycleRentalLeg bicycleRentalLeg) {
            MVTime v = C16080a.m40966v(bicycleRentalLeg);
            MVLocationDescriptor u = C13749c.m34335u(bicycleRentalLeg.mo48332W());
            ArrayList<O> c = C13720d.m34273c(bicycleRentalLeg.f41950e, (C13722f) null, new C19759a(8));
            MVLocationDescriptor u2 = C13749c.m34335u(bicycleRentalLeg.mo48334e2());
            ArrayList<O> c2 = C13720d.m34273c(bicycleRentalLeg.f41952g, (C13722f) null, new C20228e(12));
            MVTripPlanShape u3 = C16080a.m40965u(bicycleRentalLeg.f41953h);
            ArrayList<O> c3 = C13720d.m34273c(bicycleRentalLeg.f41954i, (C13722f) null, new C0112l(9));
            MVJourney mVJourney = new MVJourney(u, u2);
            MVBicycleRentalLeg mVBicycleRentalLeg = new MVBicycleRentalLeg();
            mVBicycleRentalLeg.time = v;
            mVBicycleRentalLeg.journey = mVJourney;
            mVBicycleRentalLeg.shape = u3;
            mVBicycleRentalLeg.cyclingInstructions = c3;
            mVBicycleRentalLeg.originNearbyBicycleStopIds = c;
            mVBicycleRentalLeg.destNearbyBicycleStopIds = c2;
            MVTripPlanLeg mVTripPlanLeg = new MVTripPlanLeg();
            mVTripPlanLeg.setField_ = MVTripPlanLeg._Fields.BICYCLE_RENTAL_LEG;
            mVTripPlanLeg.value_ = mVBicycleRentalLeg;
            return mVTripPlanLeg;
        }

        /* renamed from: g */
        public final Object mo39915g(WaitToTransitLineLeg waitToTransitLineLeg) {
            MVWaitToLineLeg mVWaitToLineLeg = new MVWaitToLineLeg(C16080a.m40966v(waitToTransitLineLeg), C5479c.m13666c(waitToTransitLineLeg.f42135f), C5479c.m13666c(waitToTransitLineLeg.f42136g), C5479c.m13666c(waitToTransitLineLeg.f42137h), C16080a.m40940A(waitToTransitLineLeg.f42138i), waitToTransitLineLeg.f42140k, 0);
            MVTripPlanLeg mVTripPlanLeg = new MVTripPlanLeg();
            mVTripPlanLeg.setField_ = MVTripPlanLeg._Fields.WAIT_TO_LINE_LEG;
            mVTripPlanLeg.value_ = mVWaitToLineLeg;
            return mVTripPlanLeg;
        }

        /* renamed from: h */
        public final /* bridge */ /* synthetic */ Object mo39916h(CarpoolLeg carpoolLeg) {
            return null;
        }

        /* renamed from: i */
        public final Object mo39917i(BicycleLeg bicycleLeg) {
            MVTime v = C16080a.m40966v(bicycleLeg);
            MVLocationDescriptor u = C13749c.m34335u(bicycleLeg.f41941d);
            MVLocationDescriptor u2 = C13749c.m34335u(bicycleLeg.f41942e);
            MVTripPlanShape u3 = C16080a.m40965u(bicycleLeg.f41943f);
            ArrayList<O> c = C13720d.m34273c(bicycleLeg.f41944g, (C13722f) null, new C18267n(11));
            MVJourney mVJourney = new MVJourney(u, u2);
            MVBicycleLeg mVBicycleLeg = new MVBicycleLeg();
            mVBicycleLeg.time = v;
            mVBicycleLeg.journey = mVJourney;
            mVBicycleLeg.shape = u3;
            mVBicycleLeg.cyclingInstructions = c;
            MVTripPlanLeg mVTripPlanLeg = new MVTripPlanLeg();
            mVTripPlanLeg.setField_ = MVTripPlanLeg._Fields.BICYCLE_LEG;
            mVTripPlanLeg.value_ = mVBicycleLeg;
            return mVTripPlanLeg;
        }

        /* renamed from: j */
        public final /* bridge */ /* synthetic */ Object mo39918j(EventLeg eventLeg) {
            return null;
        }

        /* renamed from: k */
        public final /* bridge */ /* synthetic */ Object mo39919k(DocklessBicycleLeg docklessBicycleLeg) {
            return null;
        }

        /* renamed from: l */
        public final Object mo39920l(WaitToTaxiLeg waitToTaxiLeg) {
            MVTaxiPrice mVTaxiPrice;
            int i = waitToTaxiLeg.f42122b.f15142b;
            MVTime v = C16080a.m40966v(waitToTaxiLeg);
            MVLocationDescriptor u = C13749c.m34335u(waitToTaxiLeg.f42125e);
            int i2 = waitToTaxiLeg.f42127g;
            TaxiPrice taxiPrice = waitToTaxiLeg.f42126f;
            ArrayList<O> arrayList = null;
            if (taxiPrice != null) {
                mVTaxiPrice = C7630a.m17424b(taxiPrice);
            } else {
                mVTaxiPrice = null;
            }
            Map<String, String> map = waitToTaxiLeg.f42128h;
            if (map != null) {
                arrayList = C13720d.m34273c(map.entrySet(), (C13722f) null, new C4454r0(10));
            }
            MVWaitToTaxiLeg mVWaitToTaxiLeg = new MVWaitToTaxiLeg();
            mVWaitToTaxiLeg.time = v;
            mVWaitToTaxiLeg.waitAtLocation = u;
            mVWaitToTaxiLeg.approxWaitingSecFromOrdering = i2;
            mVWaitToTaxiLeg.mo34893l();
            mVWaitToTaxiLeg.taxiId = i;
            mVWaitToTaxiLeg.mo34894m();
            if (mVTaxiPrice != null) {
                mVWaitToTaxiLeg.taxiPrice = mVTaxiPrice;
            }
            if (arrayList != null) {
                mVWaitToTaxiLeg.customParameters = arrayList;
            }
            MVTripPlanLeg mVTripPlanLeg = new MVTripPlanLeg();
            mVTripPlanLeg.setField_ = MVTripPlanLeg._Fields.WAIT_TO_TAXI_LEG;
            mVTripPlanLeg.value_ = mVWaitToTaxiLeg;
            return mVTripPlanLeg;
        }

        /* renamed from: m */
        public final /* bridge */ /* synthetic */ Object mo39921m(DocklessCarLeg docklessCarLeg) {
            return null;
        }

        /* renamed from: n */
        public final Object mo39922n(TransitLineLeg transitLineLeg) {
            MVLineLeg x = C16080a.m40968x(transitLineLeg);
            MVTripPlanLeg mVTripPlanLeg = new MVTripPlanLeg();
            mVTripPlanLeg.setField_ = MVTripPlanLeg._Fields.LINE_LEG;
            mVTripPlanLeg.value_ = x;
            return mVTripPlanLeg;
        }

        /* renamed from: p */
        public final /* bridge */ /* synthetic */ Object mo39924p(DocklessScooterLeg docklessScooterLeg) {
            return null;
        }

        /* renamed from: q */
        public final Object mo39925q(PathwayWalkLeg pathwayWalkLeg) {
            Integer num;
            MVTime v = C16080a.m40966v(pathwayWalkLeg);
            int c = C5479c.m13666c(pathwayWalkLeg.f42092d);
            ServerId serverId = pathwayWalkLeg.f42093e;
            Integer num2 = null;
            if (serverId != null) {
                num = Integer.valueOf(serverId.f15142b);
            } else {
                num = null;
            }
            ServerId serverId2 = pathwayWalkLeg.f42094f;
            if (serverId2 != null) {
                num2 = Integer.valueOf(serverId2.f15142b);
            }
            MVPathwayWalkLeg mVPathwayWalkLeg = new MVPathwayWalkLeg();
            mVPathwayWalkLeg.time = v;
            mVPathwayWalkLeg.stopId = c;
            mVPathwayWalkLeg.mo34487q();
            if (num != null) {
                mVPathwayWalkLeg.originPathwayId = num.intValue();
                mVPathwayWalkLeg.mo34486p();
            }
            if (num2 != null) {
                mVPathwayWalkLeg.destinationPathwayId = num2.intValue();
                mVPathwayWalkLeg.mo34484m();
            }
            MVTripPlanLeg mVTripPlanLeg = new MVTripPlanLeg();
            mVTripPlanLeg.setField_ = MVTripPlanLeg._Fields.PATHWAY_WALK_LEG;
            mVTripPlanLeg.value_ = mVPathwayWalkLeg;
            return mVTripPlanLeg;
        }

        /* renamed from: r */
        public final /* bridge */ /* synthetic */ Object mo39926r(DocklessMopedLeg docklessMopedLeg) {
            return null;
        }
    }

    static {
        C19617r.C19618a aVar = new C19617r.C19618a();
        aVar.mo51969a(1, WalkLeg.class, WalkLeg.f42145h, WalkLeg.f42146i);
        aVar.mo51969a(2, TransitLineLeg.class, TransitLineLeg.f42106i, TransitLineLeg.f42107j);
        aVar.mo51969a(3, WaitToTransitLineLeg.class, WaitToTransitLineLeg.f42129l, WaitToTransitLineLeg.f42130m);
        aVar.mo51969a(4, TaxiLeg.class, TaxiLeg.f42095k, TaxiLeg.f42096l);
        aVar.mo51969a(5, WaitToTaxiLeg.class, WaitToTaxiLeg.f42120i, WaitToTaxiLeg.f42121j);
        aVar.mo51969a(7, MultiTransitLinesLeg.class, MultiTransitLinesLeg.f42084d, MultiTransitLinesLeg.f42085e);
        aVar.mo51969a(8, PathwayWalkLeg.class, PathwayWalkLeg.f42088g, PathwayWalkLeg.f42089h);
        aVar.mo51969a(9, WaitToMultiTransitLinesLeg.class, WaitToMultiTransitLinesLeg.f42115e, WaitToMultiTransitLinesLeg.f42116f);
        aVar.mo51969a(10, BicycleLeg.class, BicycleLeg.f41937h, BicycleLeg.f41938i);
        aVar.mo51969a(11, BicycleRentalLeg.class, BicycleRentalLeg.f41945k, BicycleRentalLeg.f41946l);
        EventLeg.C16143b bVar = EventLeg.f42082c;
        aVar.mo51969a(12, EventLeg.class, bVar, bVar);
        aVar.mo51969a(13, DocklessCarLeg.class, DocklessCarLeg.f42016k, DocklessCarLeg.f42017l);
        aVar.mo51969a(14, DocklessScooterLeg.class, DocklessScooterLeg.f42060k, DocklessScooterLeg.f42061l);
        aVar.mo51969a(15, DocklessMopedLeg.class, DocklessMopedLeg.f42038k, DocklessMopedLeg.f42039l);
        aVar.mo51969a(16, DocklessBicycleLeg.class, DocklessBicycleLeg.f41994k, DocklessBicycleLeg.f41995l);
        aVar.mo51969a(18, CarpoolLeg.class, CarpoolLeg.f41964t, CarpoolLeg.f41965u);
        aVar.mo51969a(19, CarLeg.class, CarLeg.f41956h, CarLeg.f41957i);
        f41870a = aVar.mo51970b();
    }

    /* renamed from: A */
    public static MVWaitToLineLegDepartureTimes m40940A(WaitToTransitLineLeg.DeparturesInfo departuresInfo) {
        MVWaitToLineLegDepartureTimes mVWaitToLineLegDepartureTimes;
        byte[] bArr = departuresInfo.f42144d;
        if (bArr != null) {
            mVWaitToLineLegDepartureTimes = (MVWaitToLineLegDepartureTimes) C21100e.m49324S(MVWaitToLineLegDepartureTimes.class, bArr);
        } else {
            mVWaitToLineLegDepartureTimes = null;
        }
        if (mVWaitToLineLegDepartureTimes != null) {
            return mVWaitToLineLegDepartureTimes;
        }
        List<MVArrival> emptyList = Collections.emptyList();
        MVWaitToLineLegDepartureTimes mVWaitToLineLegDepartureTimes2 = new MVWaitToLineLegDepartureTimes();
        mVWaitToLineLegDepartureTimes2.epochDay = 0;
        mVWaitToLineLegDepartureTimes2.mo34861i();
        mVWaitToLineLegDepartureTimes2.futureDepartures = emptyList;
        return mVWaitToLineLegDepartureTimes2;
    }

    /* renamed from: B */
    public static void m40941B(C5269e.C5270a aVar, MVLocationDescriptor mVLocationDescriptor) {
        int i;
        int i2;
        if (MVLocationType.Stop.equals(mVLocationDescriptor.type) && (i2 = mVLocationDescriptor.f25101id) > 0) {
            aVar.mo21076c(i2);
        }
        if (MVLocationType.BicycleStop.equals(mVLocationDescriptor.type) && (i = mVLocationDescriptor.f25101id) > 0) {
            aVar.f17415b.add(Integer.valueOf(i));
        }
    }

    /* renamed from: C */
    public static void m40942C(C5269e.C5270a aVar, MVTripPlanItinerary mVTripPlanItinerary) {
        boolean z;
        boolean z2;
        boolean z3;
        boolean z4;
        boolean z5;
        boolean z6;
        boolean z7;
        boolean z8;
        boolean z9;
        boolean z11;
        List<Integer> list;
        List<Integer> list2;
        for (MVTripPlanLeg next : mVTripPlanItinerary.legs) {
            F f = next.setField_;
            boolean z12 = true;
            if (f == MVTripPlanLeg._Fields.WALK_LEG) {
                z = true;
            } else {
                z = false;
            }
            if (z) {
                MVJourney mVJourney = next.mo34667v().journey;
                m40941B(aVar, mVJourney.origin);
                m40941B(aVar, mVJourney.dest);
            } else {
                if (f == MVTripPlanLeg._Fields.BICYCLE_LEG) {
                    z2 = true;
                } else {
                    z2 = false;
                }
                if (z2) {
                    MVJourney mVJourney2 = next.mo34657k().journey;
                    m40941B(aVar, mVJourney2.origin);
                    m40941B(aVar, mVJourney2.dest);
                } else {
                    if (f == MVTripPlanLeg._Fields.BICYCLE_RENTAL_LEG) {
                        z3 = true;
                    } else {
                        z3 = false;
                    }
                    if (z3) {
                        MVBicycleRentalLeg l = next.mo34658l();
                        MVLocationType mVLocationType = MVLocationType.BicycleStop;
                        if (mVLocationType.equals(l.journey.origin.type)) {
                            aVar.f17415b.add(Integer.valueOf(l.journey.origin.f25101id));
                        }
                        if (l.mo34167k() && (list2 = l.originNearbyBicycleStopIds) != null) {
                            aVar.f17415b.addAll(list2);
                        }
                        if (mVLocationType.equals(l.journey.dest.type)) {
                            aVar.f17415b.add(Integer.valueOf(l.journey.dest.f25101id));
                        }
                        if (l.mo34162g() && (list = l.destNearbyBicycleStopIds) != null) {
                            aVar.f17415b.addAll(list);
                        }
                    } else {
                        if (f == MVTripPlanLeg._Fields.WAIT_TO_LINE_LEG) {
                            z4 = true;
                        } else {
                            z4 = false;
                        }
                        if (z4) {
                            MVWaitToLineLeg s = next.mo34664s();
                            aVar.mo21075b(s.waitToLineId);
                            aVar.mo21076c(s.waitAtStopId);
                        } else {
                            if (f == MVTripPlanLeg._Fields.LINE_LEG) {
                                z5 = true;
                            } else {
                                z5 = false;
                            }
                            if (z5) {
                                MVLineLeg o = next.mo34660o();
                                aVar.mo21075b(o.lineId);
                                List<Integer> list3 = o.stopSequenceIds;
                                if (list3 != null) {
                                    aVar.f17414a.addAll(list3);
                                }
                            } else {
                                if (f == MVTripPlanLeg._Fields.WAIT_TO_MULTI_LINE_LEG) {
                                    z6 = true;
                                } else {
                                    z6 = false;
                                }
                                if (z6) {
                                    m40944E(aVar, next.mo34665t());
                                } else {
                                    if (f == MVTripPlanLeg._Fields.LINE_WITH_ALTERNARIVES_LEG) {
                                        z7 = true;
                                    } else {
                                        z7 = false;
                                    }
                                    if (z7) {
                                        for (MVLineLeg next2 : next.mo34661p().alternativeLines) {
                                            aVar.mo21075b(next2.lineId);
                                            List<Integer> list4 = next2.stopSequenceIds;
                                            if (list4 != null) {
                                                aVar.f17414a.addAll(list4);
                                            }
                                        }
                                    } else {
                                        if (f == MVTripPlanLeg._Fields.WAIT_TO_TAXI_LEG) {
                                            z8 = true;
                                        } else {
                                            z8 = false;
                                        }
                                        if (z8) {
                                            m40941B(aVar, next.mo34666u().waitAtLocation);
                                        } else {
                                            if (f == MVTripPlanLeg._Fields.TAXI_LEG) {
                                                z9 = true;
                                            } else {
                                                z9 = false;
                                            }
                                            if (z9) {
                                                MVJourney mVJourney3 = next.mo34663r().journey;
                                                m40941B(aVar, mVJourney3.origin);
                                                m40941B(aVar, mVJourney3.dest);
                                            } else {
                                                if (f == MVTripPlanLeg._Fields.PATHWAY_WALK_LEG) {
                                                    z11 = true;
                                                } else {
                                                    z11 = false;
                                                }
                                                if (z11) {
                                                    aVar.mo21076c(next.mo34662q().stopId);
                                                } else {
                                                    if (f != MVTripPlanLeg._Fields.DOCKLESS_LEG) {
                                                        z12 = false;
                                                    }
                                                    if (z12) {
                                                        MVJourney mVJourney4 = next.mo34659m().journey;
                                                        m40941B(aVar, mVJourney4.origin);
                                                        m40941B(aVar, mVJourney4.dest);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    /* renamed from: D */
    public static void m40943D(C5269e.C5270a aVar, MVTripPlanSectionedResponse mVTripPlanSectionedResponse, HashMap hashMap) {
        boolean z;
        MVTripPlanItinerary mVTripPlanItinerary;
        F f = mVTripPlanSectionedResponse.setField_;
        boolean z2 = true;
        if (f == MVTripPlanSectionedResponse._Fields.ITINERARY) {
            z = true;
        } else {
            z = false;
        }
        if (z) {
            m40942C(aVar, mVTripPlanSectionedResponse.mo34737l());
            return;
        }
        if (f != MVTripPlanSectionedResponse._Fields.ITINERARY_UPDATE) {
            z2 = false;
        }
        if (z2 && (mVTripPlanItinerary = (MVTripPlanItinerary) hashMap.get(mVTripPlanSectionedResponse.mo34738m().guid)) != null) {
            m40942C(aVar, mVTripPlanItinerary);
        }
    }

    /* renamed from: E */
    public static void m40944E(C5269e.C5270a aVar, MVWaitToMultiLineLeg mVWaitToMultiLineLeg) {
        aVar.mo21076c(mVWaitToMultiLineLeg.waitAtStopId);
        aVar.mo21076c(mVWaitToMultiLineLeg.departOnStopId);
        for (MVWaitToLineAlternative mVWaitToLineAlternative : mVWaitToMultiLineLeg.alternatives) {
            aVar.mo21075b(mVWaitToLineAlternative.waitToLineId);
        }
    }

    /* renamed from: a */
    public static MVWalkingInstruction m40945a(TurnInstruction turnInstruction) {
        MVWalkingDirection mVWalkingDirection;
        TurnInstruction.Direction direction = turnInstruction.f41935a;
        switch (C16081a.f41878h[direction.ordinal()]) {
            case 1:
                mVWalkingDirection = MVWalkingDirection.m30920m(MVRelativeDirection.Depart);
                break;
            case 2:
                mVWalkingDirection = MVWalkingDirection.m30920m(MVRelativeDirection.HardLeft);
                break;
            case 3:
                mVWalkingDirection = MVWalkingDirection.m30920m(MVRelativeDirection.Left);
                break;
            case 4:
                mVWalkingDirection = MVWalkingDirection.m30920m(MVRelativeDirection.SlightlyLeft);
                break;
            case 5:
                mVWalkingDirection = MVWalkingDirection.m30920m(MVRelativeDirection.Continue);
                break;
            case 6:
                mVWalkingDirection = MVWalkingDirection.m30920m(MVRelativeDirection.SlightlyRight);
                break;
            case 7:
                mVWalkingDirection = MVWalkingDirection.m30920m(MVRelativeDirection.Right);
                break;
            case 8:
                mVWalkingDirection = MVWalkingDirection.m30920m(MVRelativeDirection.HardRight);
                break;
            case 9:
                mVWalkingDirection = MVWalkingDirection.m30920m(MVRelativeDirection.CircleClockwise);
                break;
            case 10:
                mVWalkingDirection = MVWalkingDirection.m30920m(MVRelativeDirection.CircleCounterclockwise);
                break;
            case 11:
                mVWalkingDirection = MVWalkingDirection.m30920m(MVRelativeDirection.Elevator);
                break;
            case 12:
                mVWalkingDirection = MVWalkingDirection.m30920m(MVRelativeDirection.UturnLeft);
                break;
            case 13:
                mVWalkingDirection = MVWalkingDirection.m30920m(MVRelativeDirection.UturnRight);
                break;
            case 14:
                mVWalkingDirection = MVWalkingDirection.m30918k(MVAbsoluteDirection.North);
                break;
            case 15:
                mVWalkingDirection = MVWalkingDirection.m30918k(MVAbsoluteDirection.Northeast);
                break;
            case 16:
                mVWalkingDirection = MVWalkingDirection.m30918k(MVAbsoluteDirection.east);
                break;
            case 17:
                mVWalkingDirection = MVWalkingDirection.m30918k(MVAbsoluteDirection.Southeast);
                break;
            case 18:
                mVWalkingDirection = MVWalkingDirection.m30918k(MVAbsoluteDirection.South);
                break;
            case 19:
                mVWalkingDirection = MVWalkingDirection.m30918k(MVAbsoluteDirection.Southwest);
                break;
            case 20:
                mVWalkingDirection = MVWalkingDirection.m30918k(MVAbsoluteDirection.West);
                break;
            case 21:
                mVWalkingDirection = MVWalkingDirection.m30918k(MVAbsoluteDirection.Northwest);
                break;
            default:
                throw new IllegalStateException("Unknown turn direction: " + direction);
        }
        String str = turnInstruction.f41936b;
        MVWalkingInstruction mVWalkingInstruction = new MVWalkingInstruction();
        mVWalkingInstruction.direction = mVWalkingDirection;
        mVWalkingInstruction.streetName = str;
        mVWalkingInstruction.lengthInMeters = 0.0d;
        mVWalkingInstruction.mo34937k();
        mVWalkingInstruction.travelTimeInMs = 0;
        mVWalkingInstruction.mo34938l();
        mVWalkingInstruction.startLocation = null;
        return mVWalkingInstruction;
    }

    /* renamed from: b */
    public static TurnInstruction m40946b(MVWalkingInstruction mVWalkingInstruction) {
        boolean z;
        TurnInstruction.Direction direction;
        MVWalkingDirection mVWalkingDirection = mVWalkingInstruction.direction;
        F f = mVWalkingDirection.setField_;
        F f2 = MVWalkingDirection._Fields.RELATIVE;
        if (f == f2) {
            z = true;
        } else {
            z = false;
        }
        if (z) {
            if (f == f2) {
                MVRelativeDirection mVRelativeDirection = (MVRelativeDirection) mVWalkingDirection.value_;
                switch (C16081a.f41876f[mVRelativeDirection.ordinal()]) {
                    case 1:
                        direction = TurnInstruction.Direction.DEPART;
                        break;
                    case 2:
                        direction = TurnInstruction.Direction.HARD_LEFT;
                        break;
                    case 3:
                        direction = TurnInstruction.Direction.LEFT;
                        break;
                    case 4:
                        direction = TurnInstruction.Direction.SLIGHTLY_LEFT;
                        break;
                    case 5:
                        direction = TurnInstruction.Direction.CONTINUE;
                        break;
                    case 6:
                        direction = TurnInstruction.Direction.SLIGHTLY_RIGHT;
                        break;
                    case 7:
                        direction = TurnInstruction.Direction.RIGHT;
                        break;
                    case 8:
                        direction = TurnInstruction.Direction.HARD_RIGHT;
                        break;
                    case 9:
                        direction = TurnInstruction.Direction.CIRCLE_CLOCKWISE;
                        break;
                    case 10:
                        direction = TurnInstruction.Direction.CIRCLE_COUNTERCLOCKWISE;
                        break;
                    case 11:
                        direction = TurnInstruction.Direction.ELEVATOR;
                        break;
                    case 12:
                        direction = TurnInstruction.Direction.U_TURN_LEFT;
                        break;
                    case 13:
                        direction = TurnInstruction.Direction.U_TURN_RIGHT;
                        break;
                    default:
                        throw new IllegalArgumentException("Unknown relative direction type: " + mVRelativeDirection);
                }
            } else {
                StringBuilder k = C13555b.m33972k("Cannot get field 'relative' because union is currently set to ");
                k.append(MVWalkingDirection.m30919l((MVWalkingDirection._Fields) mVWalkingDirection.setField_).f63355a);
                throw new RuntimeException(k.toString());
            }
        } else if (f == MVWalkingDirection._Fields.ABSOLUTE) {
            MVAbsoluteDirection mVAbsoluteDirection = (MVAbsoluteDirection) mVWalkingDirection.value_;
            switch (C16081a.f41877g[mVAbsoluteDirection.ordinal()]) {
                case 1:
                    direction = TurnInstruction.Direction.NORTH;
                    break;
                case 2:
                    direction = TurnInstruction.Direction.NORTH_EAST;
                    break;
                case 3:
                    direction = TurnInstruction.Direction.EAST;
                    break;
                case 4:
                    direction = TurnInstruction.Direction.SOUTH_EAST;
                    break;
                case 5:
                    direction = TurnInstruction.Direction.SOUTH;
                    break;
                case 6:
                    direction = TurnInstruction.Direction.SOUTH_WEST;
                    break;
                case 7:
                    direction = TurnInstruction.Direction.WEST;
                    break;
                case 8:
                    direction = TurnInstruction.Direction.NORTH_WEST;
                    break;
                default:
                    throw new IllegalArgumentException("Unknown absolute direction type: " + mVAbsoluteDirection);
            }
        } else {
            StringBuilder k2 = C13555b.m33972k("Cannot get field 'absolute' because union is currently set to ");
            k2.append(MVWalkingDirection.m30919l((MVWalkingDirection._Fields) mVWalkingDirection.setField_).f63355a);
            throw new RuntimeException(k2.toString());
        }
        return new TurnInstruction(direction, mVWalkingInstruction.streetName);
    }

    /* renamed from: c */
    public static Itinerary m40947c(String str, C19728f fVar, C19047a aVar, MVTripPlanItinerary mVTripPlanItinerary, C5268d dVar) {
        Image image;
        try {
            String str2 = mVTripPlanItinerary.guid;
            ItineraryMetadata d = m40948d(mVTripPlanItinerary, str);
            ArrayList<O> c = C13720d.m34273c(mVTripPlanItinerary.legs, (C13722f) null, new C16766b(fVar, aVar, dVar));
            int size = c.size();
            if (size >= 2) {
                for (int i = 1; i < size; i++) {
                    LocationDescriptor e2 = ((Leg) c.get(i - 1)).mo48334e2();
                    LocationDescriptor W = ((Leg) c.get(i)).mo48332W();
                    Image image2 = e2.f23655j;
                    if (image2 == null && (image = W.f23655j) != null) {
                        e2.f23655j = image;
                    } else if (image2 != null && W.f23655j == null) {
                        W.f23655j = image2;
                    }
                }
            }
            return new Itinerary(str2, d, c);
        } catch (Exception e) {
            String str3 = mVTripPlanItinerary.guid;
            String message = e.getMessage();
            MoovitApplication moovitApplication = MoovitApplication.f37317k;
            if (moovitApplication != null) {
                C6677a aVar2 = moovitApplication.mo44558j().f50173c;
                AnalyticsFlowKey analyticsFlowKey = AnalyticsFlowKey.APP;
                C17474b.C17475a aVar3 = new C17474b.C17475a(AnalyticsEventKey.ITINERARY_LOAD_FAILED);
                aVar3.mo49939g(AnalyticsAttributeKey.ITINERARY_GUID, mVTripPlanItinerary.guid);
                aVar3.mo49935c(AnalyticsAttributeKey.ID, mVTripPlanItinerary.sectionId);
                aVar3.mo49945m(AnalyticsAttributeKey.ERROR_MESSAGE, message);
                C17474b[] bVarArr = {aVar3.mo49933a()};
                aVar2.getClass();
                C6677a.m15759j(moovitApplication, analyticsFlowKey, true, bVarArr);
            }
            throw e;
        }
    }

    /* renamed from: d */
    public static ItineraryMetadata m40948d(MVTripPlanItinerary mVTripPlanItinerary, String str) {
        int i;
        MVCurrencyAmount mVCurrencyAmount;
        MVEmissionLevel mVEmissionLevel;
        int i2;
        ServerId serverId = new ServerId(mVTripPlanItinerary.sectionId);
        MVGroupType mVGroupType = mVTripPlanItinerary.groupType;
        int i3 = C16081a.f41875e[mVGroupType.ordinal()];
        if (i3 != 1) {
            i = 2;
            if (i3 == 2) {
                i = 1;
            } else if (i3 != 3) {
                if (i3 == 4) {
                    i = 3;
                } else {
                    throw new IllegalArgumentException("Unknown itinerary group type: " + mVGroupType);
                }
            }
        } else {
            i = 0;
        }
        String str2 = mVTripPlanItinerary.groupKey;
        EmissionLevel emissionLevel = null;
        if (mVTripPlanItinerary.mo34635o()) {
            mVCurrencyAmount = mVTripPlanItinerary.itineraryFare.price;
        } else {
            mVCurrencyAmount = null;
        }
        CurrencyAmount d = C13749c.m34318d(mVCurrencyAmount);
        boolean z = mVTripPlanItinerary.hasNext;
        boolean z2 = mVTripPlanItinerary.hasPrev;
        boolean z3 = mVTripPlanItinerary.relevantForRealtime;
        boolean z4 = mVTripPlanItinerary.isAccessible;
        if (mVTripPlanItinerary.mo34626f() && (i2 = mVEmissionLevel.co2) >= 0) {
            emissionLevel = new EmissionLevel(i2, C13749c.m34316b((mVEmissionLevel = mVTripPlanItinerary.emissionLevel).color));
        }
        return new ItineraryMetadata(str, serverId, i, str2, d, z, z2, z3, z4, emissionLevel, mVTripPlanItinerary.serverContext);
    }

    /* renamed from: e */
    public static LocationDescriptor m40949e(MVLocationDescriptor mVLocationDescriptor, MVLocationSourceType mVLocationSourceType, C5268d dVar) {
        ServerId serverId;
        BicycleStop bicycleStop;
        ServerId serverId2;
        TransitStop c;
        LocationDescriptor j = C13749c.m34324j(mVLocationDescriptor, mVLocationSourceType);
        if (!(!LocationDescriptor.LocationType.STOP.equals(j.f23647b) || (serverId2 = j.f23649d) == null || (c = dVar.mo21064c(serverId2)) == null)) {
            j = LocationDescriptor.m17769c(c);
        }
        if (!LocationDescriptor.LocationType.BICYCLE_STOP.equals(j.f23647b) || (serverId = j.f23649d) == null || (bicycleStop = (BicycleStop) dVar.f17408e.get(serverId)) == null) {
            return j;
        }
        return LocationDescriptor.m17768b(bicycleStop);
    }

    /* renamed from: f */
    public static Polylon m40950f(MVTripPlanShape mVTripPlanShape) {
        String str = mVTripPlanShape.polyline;
        float f = (float) mVTripPlanShape.distanceInMeters;
        if (f <= BitmapDescriptorFactory.HUE_RED) {
            f = -1.0f;
        }
        return Polylon.m40194d(f, str);
    }

    /* renamed from: g */
    public static C20944i0<Time, Time> m40951g(MVTime mVTime) {
        long j;
        long j2;
        if (mVTime.mo34582k()) {
            j = mVTime.staticStartTime;
        } else {
            j = mVTime.startTime;
        }
        if (mVTime.mo34581j()) {
            j2 = mVTime.staticEndTime;
        } else {
            j2 = mVTime.endTime;
        }
        return new C20944i0<>(new Time(C7923a.m18009i(j)), new Time(C7923a.m18009i(j2)));
    }

    /* renamed from: h */
    public static C20944i0<Time, Time> m40952h(MVTime mVTime) {
        Time time;
        Time time2;
        if (!mVTime.mo34578h() || !mVTime.isRealTime) {
            time2 = new Time(C7923a.m18009i(mVTime.startTime));
            time = new Time(C7923a.m18009i(mVTime.endTime));
        } else {
            time2 = new Time(C7923a.m18009i(mVTime.staticStartTime), C7923a.m18009i(mVTime.startTime));
            time = new Time(C7923a.m18009i(mVTime.staticEndTime), C7923a.m18009i(mVTime.endTime));
        }
        return new C20944i0<>(time2, time);
    }

    /* renamed from: i */
    public static TripPlannerTime.Type m40953i(MVTimeType mVTimeType) {
        int i = C16081a.f41882l[mVTimeType.ordinal()];
        if (i == 1) {
            return TripPlannerTime.Type.ARRIVE;
        }
        if (i == 2) {
            return TripPlannerTime.Type.DEPART;
        }
        if (i == 3) {
            return TripPlannerTime.Type.LAST;
        }
        throw new ApplicationBugException("Unknown trip plan time type: " + mVTimeType);
    }

    /* renamed from: j */
    public static TransitLineLeg m40954j(C5268d dVar, MVLineLeg mVLineLeg) {
        CurrencyAmount currencyAmount;
        LongServerId longServerId;
        C20944i0<Time, Time> h = m40952h(mVLineLeg.time);
        DbEntityRef<TransitLine> newTransitLineRef = DbEntityRef.newTransitLineRef(dVar.mo21063b(new ServerId(mVLineLeg.lineId)));
        ArrayList<O> c = C13720d.m34273c(mVLineLeg.stopSequenceIds, (C13722f) null, new C13719c(new C18847a(2), new C13533e(dVar, 1)));
        Polylon f = m40950f(mVLineLeg.shape);
        MVLegFare mVLegFare = mVLineLeg.legFare;
        if (mVLegFare == null) {
            currencyAmount = null;
        } else if (!mVLegFare.payForThisLeg) {
            currencyAmount = new CurrencyAmount(mVLegFare.price.currencyCode, new BigDecimal(-1));
        } else {
            currencyAmount = C13749c.m34318d(mVLegFare.price);
        }
        if (mVLineLeg.mo34370q()) {
            longServerId = new LongServerId(mVLineLeg.tripId);
        } else {
            longServerId = null;
        }
        return new TransitLineLeg((Time) h.f52692a, (Time) h.f52693b, newTransitLineRef, c, f, currencyAmount, longServerId);
    }

    /* renamed from: k */
    public static TripPlannerTransportType m40955k(MVRouteType mVRouteType) {
        switch (C16081a.f41885o[mVRouteType.ordinal()]) {
            case 1:
                return TripPlannerTransportType.TRAM;
            case 2:
                return TripPlannerTransportType.SUBWAY;
            case 3:
                return TripPlannerTransportType.TRAIN;
            case 4:
                return TripPlannerTransportType.BUS;
            case 5:
                return TripPlannerTransportType.FERRY;
            case 6:
                return TripPlannerTransportType.CABLE;
            case 7:
                return TripPlannerTransportType.GONDOLA;
            case 8:
                return TripPlannerTransportType.FUNICULAR;
            default:
                throw new BadResponseException("Unknown transport type: " + mVRouteType);
        }
    }

    /* renamed from: l */
    public static TripPlanResult m40956l(String str, C19728f fVar, C19047a aVar, MVTripPlanSectionedResponse mVTripPlanSectionedResponse, HashMap hashMap, C5268d dVar) {
        boolean z;
        boolean z2;
        boolean z3;
        boolean z4;
        boolean z5;
        long j;
        long j2;
        CurrencyAmount currencyAmount;
        String str2 = str;
        C19728f fVar2 = fVar;
        C19047a aVar2 = aVar;
        MVTripPlanSectionedResponse mVTripPlanSectionedResponse2 = mVTripPlanSectionedResponse;
        HashMap hashMap2 = hashMap;
        C5268d dVar2 = dVar;
        F f = mVTripPlanSectionedResponse2.setField_;
        F f2 = MVTripPlanSectionedResponse._Fields.TRIP_PLAN_SECTIONS;
        boolean z6 = true;
        if (f == f2) {
            z = true;
        } else {
            z = false;
        }
        TripPlanTodBanner.C16078c cVar = null;
        if (!z) {
            F f3 = MVTripPlanSectionedResponse._Fields.SECTION_MATCH_COUNT;
            if (f == f3) {
                z2 = true;
            } else {
                z2 = false;
            }
            if (!z2) {
                F f4 = MVTripPlanSectionedResponse._Fields.TOD_BANNER;
                if (f == f4) {
                    z3 = true;
                } else {
                    z3 = false;
                }
                if (!z3) {
                    F f5 = MVTripPlanSectionedResponse._Fields.FLEX_TIME_BANNER;
                    if (f == f5) {
                        z4 = true;
                    } else {
                        z4 = false;
                    }
                    if (!z4) {
                        if (f == MVTripPlanSectionedResponse._Fields.ITINERARY) {
                            z5 = true;
                        } else {
                            z5 = false;
                        }
                        if (z5) {
                            MVTripPlanItinerary l = mVTripPlanSectionedResponse.mo34737l();
                            hashMap2.put(l.guid, l);
                            return new TripPlanResult(m40947c(str2, fVar2, aVar2, l, dVar2));
                        }
                        if (f != MVTripPlanSectionedResponse._Fields.ITINERARY_UPDATE) {
                            z6 = false;
                        }
                        if (!z6) {
                            return new TripPlanResult((TripPlanConfig) null, (Itinerary) null, (C20944i0<ServerId, Integer>) null, (TripPlanTodBanner) null, (TripPlanFlexTimeBanner) null);
                        }
                        MVTripPlanItineraryUpdate m = mVTripPlanSectionedResponse.mo34738m();
                        MVTripPlanItinerary mVTripPlanItinerary = (MVTripPlanItinerary) hashMap2.get(m.guid);
                        if (mVTripPlanItinerary == null) {
                            return new TripPlanResult((TripPlanConfig) null, (Itinerary) null, (C20944i0<ServerId, Integer>) null, (TripPlanTodBanner) null, (TripPlanFlexTimeBanner) null);
                        }
                        if (m.mo34650g()) {
                            MVItineraryFare mVItineraryFare = new MVItineraryFare();
                            mVItineraryFare.price = m.totalTicketPrice;
                            mVItineraryFare.partial = false;
                            mVItineraryFare.mo27242k();
                            mVTripPlanItinerary.itineraryFare = mVItineraryFare;
                        }
                        return new TripPlanResult(m40947c(str2, fVar2, aVar2, mVTripPlanItinerary, dVar2));
                    } else if (mVTripPlanSectionedResponse2.setField_ == f5) {
                        MVTripPlanFlexTimeBanner mVTripPlanFlexTimeBanner = (MVTripPlanFlexTimeBanner) mVTripPlanSectionedResponse2.value_;
                        return new TripPlanResult((TripPlanConfig) null, (Itinerary) null, (C20944i0<ServerId, Integer>) null, (TripPlanTodBanner) null, new TripPlanFlexTimeBanner(new ServerId(mVTripPlanFlexTimeBanner.sectionId), UUID.randomUUID().toString(), mVTripPlanFlexTimeBanner.estimatedSaveTime, new TripPlannerTime(m40953i(mVTripPlanFlexTimeBanner.timeType), mVTripPlanFlexTimeBanner.time)));
                    } else {
                        StringBuilder k = C13555b.m33972k("Cannot get field 'flexTimeBanner' because union is currently set to ");
                        k.append(MVTripPlanSectionedResponse.m30679k((MVTripPlanSectionedResponse._Fields) mVTripPlanSectionedResponse2.setField_).f63355a);
                        throw new RuntimeException(k.toString());
                    }
                } else if (mVTripPlanSectionedResponse2.setField_ == f4) {
                    MVTripPlanTodBanner mVTripPlanTodBanner = (MVTripPlanTodBanner) mVTripPlanSectionedResponse2.value_;
                    ServerId serverId = new ServerId(mVTripPlanTodBanner.sectionId);
                    ServerId serverId2 = new ServerId(mVTripPlanTodBanner.taxiId);
                    if (mVTripPlanTodBanner.mo34775g()) {
                        j = mVTripPlanTodBanner.approxPickupTime;
                    } else {
                        j = -1;
                    }
                    if (mVTripPlanTodBanner.mo34774f()) {
                        j2 = mVTripPlanTodBanner.approxArrivalTime;
                    } else {
                        j2 = -1;
                    }
                    if (mVTripPlanTodBanner.mo34784p()) {
                        currencyAmount = C13749c.m34318d(mVTripPlanTodBanner.price);
                    } else {
                        currencyAmount = null;
                    }
                    String str3 = mVTripPlanTodBanner.providerCustomerId;
                    if (!C20964s0.m49090h(mVTripPlanTodBanner.messageTitle) || !C20964s0.m49090h(mVTripPlanTodBanner.messageSubtitle)) {
                        cVar = new TripPlanTodBanner.C16078c(mVTripPlanTodBanner.messageTitle, mVTripPlanTodBanner.messageSubtitle, mVTripPlanTodBanner.messageActionUrl, mVTripPlanTodBanner.messageActionText);
                    }
                    return new TripPlanResult((TripPlanConfig) null, (Itinerary) null, (C20944i0<ServerId, Integer>) null, new TripPlanTodBanner(serverId, serverId2, j, j2, currencyAmount, str3, cVar, mVTripPlanTodBanner.bannerId), (TripPlanFlexTimeBanner) null);
                } else {
                    StringBuilder k2 = C13555b.m33972k("Cannot get field 'todBanner' because union is currently set to ");
                    k2.append(MVTripPlanSectionedResponse.m30679k((MVTripPlanSectionedResponse._Fields) mVTripPlanSectionedResponse2.setField_).f63355a);
                    throw new RuntimeException(k2.toString());
                }
            } else if (mVTripPlanSectionedResponse2.setField_ == f3) {
                MVTripPlanSectionMatchCount mVTripPlanSectionMatchCount = (MVTripPlanSectionMatchCount) mVTripPlanSectionedResponse2.value_;
                return new TripPlanResult((TripPlanConfig) null, (Itinerary) null, new C20944i0(new ServerId(mVTripPlanSectionMatchCount.sectionId), Integer.valueOf(Math.max(0, mVTripPlanSectionMatchCount.matchCount))), (TripPlanTodBanner) null, (TripPlanFlexTimeBanner) null);
            } else {
                StringBuilder k3 = C13555b.m33972k("Cannot get field 'sectionMatchCount' because union is currently set to ");
                k3.append(MVTripPlanSectionedResponse.m30679k((MVTripPlanSectionedResponse._Fields) mVTripPlanSectionedResponse2.setField_).f63355a);
                throw new RuntimeException(k3.toString());
            }
        } else if (mVTripPlanSectionedResponse2.setField_ == f2) {
            MVTripPlanSections mVTripPlanSections = (MVTripPlanSections) mVTripPlanSectionedResponse2.value_;
            return new TripPlanResult(new TripPlanConfig(C13720d.m34273c(mVTripPlanSections.tripPlanSections, (C13722f) null, new C19759a(7)), mVTripPlanSections.isOtpRt), (Itinerary) null, (C20944i0<ServerId, Integer>) null, (TripPlanTodBanner) null, (TripPlanFlexTimeBanner) null);
        } else {
            StringBuilder k4 = C13555b.m33972k("Cannot get field 'tripPlanSections' because union is currently set to ");
            k4.append(MVTripPlanSectionedResponse.m30679k((MVTripPlanSectionedResponse._Fields) mVTripPlanSectionedResponse2.setField_).f63355a);
            throw new RuntimeException(k4.toString());
        }
    }

    /* renamed from: m */
    public static WaitToMultiTransitLinesLeg m40957m(C19728f fVar, C19047a aVar, MVWaitToMultiLineLeg mVWaitToMultiLineLeg, C5268d dVar) {
        return new WaitToMultiTransitLinesLeg(C13720d.m34273c(C13720d.m34273c(mVWaitToMultiLineLeg.alternatives, (C13722f) null, new C16767c(mVWaitToMultiLineLeg)), (C13722f) null, new C16768d(fVar, aVar, dVar)), mVWaitToMultiLineLeg.primaryAlternativeIndex, C16028g.m40829g(mVWaitToMultiLineLeg.multiLinesImage));
    }

    /* renamed from: n */
    public static WaitToTransitLineLeg m40958n(C19728f fVar, C19047a aVar, C5268d dVar, MVWaitToLineLeg mVWaitToLineLeg) {
        WaitToTransitLineLeg.DeparturesInfo departuresInfo;
        int i;
        List<MVArrival> list;
        StopRealTimeInformation stopRealTimeInformation;
        byte[] bArr;
        C5268d dVar2 = dVar;
        MVWaitToLineLeg mVWaitToLineLeg2 = mVWaitToLineLeg;
        C20944i0<Time, Time> h = m40952h(mVWaitToLineLeg2.time);
        C20944i0<Time, Time> g = m40951g(mVWaitToLineLeg2.time);
        TransitLine b = dVar2.mo21063b(new ServerId(mVWaitToLineLeg2.waitToLineId));
        TransitStop c = dVar2.mo21064c(new ServerId(mVWaitToLineLeg2.waitAtStopId));
        TransitStop c2 = dVar2.mo21064c(new ServerId(mVWaitToLineLeg2.departOnStopId));
        LineServiceAlertDigest lineServiceAlertDigest = null;
        if (mVWaitToLineLeg.mo34836h()) {
            MVWaitToLineLegDepartureTimes mVWaitToLineLegDepartureTimes = mVWaitToLineLeg2.futureDepartureTimes;
            List<MVArrival> list2 = mVWaitToLineLegDepartureTimes.futureDepartures;
            if (list2 == null) {
                i = 0;
            } else {
                i = list2.size();
            }
            if (i > 0) {
                list = mVWaitToLineLegDepartureTimes.futureDepartures;
            } else {
                list = Collections.emptyList();
            }
            Schedule b2 = C7923a.m18002b(C7923a.m18011k(fVar, mVWaitToLineLegDepartureTimes.epochDay), list, false, ((Boolean) aVar.mo51505b(C19053d.f48457I)).booleanValue(), -1, dVar);
            if (mVWaitToLineLegDepartureTimes.mo34859h()) {
                stopRealTimeInformation = C7923a.m18005e(mVWaitToLineLegDepartureTimes.stopRealTimeInfo);
            } else {
                stopRealTimeInformation = null;
            }
            try {
                ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
                mVWaitToLineLegDepartureTimes.mo25202X0(new C25111a(new C25276a((OutputStream) byteArrayOutputStream)));
                bArr = byteArrayOutputStream.toByteArray();
            } catch (Exception unused) {
                bArr = null;
            }
            departuresInfo = new WaitToTransitLineLeg.DeparturesInfo(b2, stopRealTimeInformation, bArr);
        } else {
            departuresInfo = new WaitToTransitLineLeg.DeparturesInfo(Schedule.f23657c, (StopRealTimeInformation) null, (byte[]) null);
        }
        WaitToTransitLineLeg.DeparturesInfo departuresInfo2 = departuresInfo;
        if (mVWaitToLineLeg.mo34839j()) {
            lineServiceAlertDigest = C12776e.m32577a(mVWaitToLineLeg2.serviceAlert);
        }
        return new WaitToTransitLineLeg((Time) h.f52692a, (Time) h.f52693b, (Time) g.f52692a, (Time) g.f52693b, DbEntityRef.newTransitLineRef(b), DbEntityRef.newTransitStopRef(c), DbEntityRef.newTransitStopRef(c2), departuresInfo2, lineServiceAlertDigest, mVWaitToLineLeg2.waitOnVehicle);
    }

    /* renamed from: o */
    public static MVAlgorithmType m40959o(TripPlannerAlgorithmType tripPlannerAlgorithmType) {
        int i = C16081a.f41887q[tripPlannerAlgorithmType.ordinal()];
        if (i == 1) {
            return MVAlgorithmType.FILTER;
        }
        if (i == 2) {
            return MVAlgorithmType.PREFERRED;
        }
        throw new ApplicationBugException("Unknown trip plan algorithm type: " + tripPlannerAlgorithmType);
    }

    /* renamed from: p */
    public static MVCarPoolSource m40960p(CarpoolLeg.CarpoolProvider carpoolProvider) {
        switch (C16081a.f41874d[carpoolProvider.ordinal()]) {
            case 1:
                return MVCarPoolSource.Moovit;
            case 2:
                return MVCarPoolSource.Waze;
            case 3:
                return MVCarPoolSource.Idfm_klaxit;
            case 4:
                return MVCarPoolSource.Idfm_karos;
            case 5:
                return MVCarPoolSource.Idfm_blablalines;
            case 6:
                return MVCarPoolSource.BlaBla;
            default:
                throw new IllegalStateException("Unknown carpool provider: " + carpoolProvider);
        }
    }

    /* renamed from: q */
    public static MVTripPlanItinerary m40961q(Itinerary itinerary) {
        int i;
        MVGroupType mVGroupType;
        ArrayList<O> c = C13720d.m34273c(itinerary.mo48295u0(), (C13722f) null, new C16082b());
        if (c.contains((Object) null)) {
            return null;
        }
        ItineraryMetadata itineraryMetadata = itinerary.f41895c;
        String str = itinerary.f41894b;
        ServerId serverId = itineraryMetadata.f41901c;
        if (serverId == null) {
            i = -1;
        } else {
            i = serverId.f15142b;
        }
        int i2 = itineraryMetadata.f41902d;
        if (i2 == 0) {
            mVGroupType = MVGroupType.NONE;
        } else if (i2 == 1) {
            mVGroupType = MVGroupType.NO_GROUPING;
        } else if (i2 == 2) {
            mVGroupType = MVGroupType.LINE_GROUPING;
        } else if (i2 == 3) {
            mVGroupType = MVGroupType.STOP_GROUPING;
        } else {
            throw new IllegalArgumentException(C16759e.m42349e("Unknown itinerary group type: ", i2));
        }
        String str2 = itineraryMetadata.f41903e;
        boolean z = itineraryMetadata.f41906h;
        boolean z2 = itineraryMetadata.f41905g;
        boolean z3 = itineraryMetadata.f41907i;
        boolean z4 = itineraryMetadata.f41908j;
        MVTripPlanItinerary mVTripPlanItinerary = new MVTripPlanItinerary();
        mVTripPlanItinerary.guid = str;
        mVTripPlanItinerary.sectionId = i;
        mVTripPlanItinerary.mo34621E();
        mVTripPlanItinerary.groupType = mVGroupType;
        mVTripPlanItinerary.groupKey = str2;
        mVTripPlanItinerary.legs = c;
        mVTripPlanItinerary.hasPrev = z;
        mVTripPlanItinerary.mo34644w();
        mVTripPlanItinerary.hasNext = z2;
        mVTripPlanItinerary.mo34643v();
        mVTripPlanItinerary.relevantForRealtime = z3;
        mVTripPlanItinerary.mo34620D();
        mVTripPlanItinerary.isAccessible = z4;
        mVTripPlanItinerary.mo34619A();
        mVTripPlanItinerary.hasSecondaryArrivalItinerary = false;
        mVTripPlanItinerary.mo34645y();
        mVTripPlanItinerary.serverContext = itineraryMetadata.f41910l;
        return mVTripPlanItinerary;
    }

    /* renamed from: r */
    public static MVLocationTarget m40962r(LocationDescriptor locationDescriptor) {
        MVLocationDescriptor u = C13749c.m34335u(locationDescriptor);
        MVLocationSourceType v = C13749c.m34336v(locationDescriptor.f23648c);
        MVLocationTarget mVLocationTarget = new MVLocationTarget();
        mVLocationTarget.location = u;
        mVLocationTarget.sourceType = v;
        return mVLocationTarget;
    }

    /* renamed from: s */
    public static MVPersonalPreferences m40963s(TripPlannerPersonalPrefs tripPlannerPersonalPrefs, AccessibilityPersonalPrefs accessibilityPersonalPrefs) {
        MVPersonalPreferences mVPersonalPreferences = new MVPersonalPreferences();
        mVPersonalPreferences.isSlowWalking = tripPlannerPersonalPrefs.f23793b;
        mVPersonalPreferences.mo34498j();
        mVPersonalPreferences.isAccessibleRoutes = accessibilityPersonalPrefs.f37352b;
        mVPersonalPreferences.mo34497i();
        short s = tripPlannerPersonalPrefs.f23794c;
        if (s != -1) {
            mVPersonalPreferences.maxWalkingMinutes = s;
            mVPersonalPreferences.mo34499k();
        }
        return mVPersonalPreferences;
    }

    /* renamed from: t */
    public static MVTripPlanPref m40964t(TripPlannerRouteType tripPlannerRouteType) {
        int i = C16081a.f41883m[tripPlannerRouteType.ordinal()];
        if (i == 1) {
            return MVTripPlanPref.LeastWalking;
        }
        if (i == 2) {
            return MVTripPlanPref.LeastTransfers;
        }
        if (i == 3) {
            return MVTripPlanPref.Fastest;
        }
        throw new ApplicationBugException("Unknown trip plan route type: " + tripPlannerRouteType);
    }

    /* renamed from: u */
    public static MVTripPlanShape m40965u(Polyline polyline) {
        String n = Polylon.m40196n(polyline);
        MVTripPlanShape mVTripPlanShape = new MVTripPlanShape();
        mVTripPlanShape.distanceInMeters = (double) polyline.mo24339Z0();
        mVTripPlanShape.mo34753h();
        mVTripPlanShape.polyline = n;
        return mVTripPlanShape;
    }

    /* renamed from: v */
    public static MVTime m40966v(Leg leg) {
        boolean j = leg.mo48339o1().mo24633j();
        long a = C7923a.m18001a(leg.mo48339o1().mo24631g());
        long a2 = C7923a.m18001a(leg.mo48331K1().mo24631g());
        MVTime mVTime = new MVTime();
        mVTime.startTime = a;
        mVTime.mo34586p();
        mVTime.endTime = a2;
        mVTime.mo34583l();
        mVTime.isRealTime = j;
        mVTime.mo34585o();
        return mVTime;
    }

    /* renamed from: w */
    public static MVTimeType m40967w(TripPlannerTime.Type type) {
        int i = C16081a.f41881k[type.ordinal()];
        if (i == 1) {
            return MVTimeType.Arrival;
        }
        if (i == 2) {
            return MVTimeType.Departure;
        }
        if (i == 3) {
            return MVTimeType.Last;
        }
        throw new ApplicationBugException("Unknown trip plan time type: " + type);
    }

    /* renamed from: x */
    public static MVLineLeg m40968x(TransitLineLeg transitLineLeg) {
        MVTime v = m40966v(transitLineLeg);
        int c = C5479c.m13666c(transitLineLeg.f42110d);
        ArrayList<O> c2 = C13720d.m34273c(transitLineLeg.f42111e, (C13722f) null, new C4454r0(12));
        MVTripPlanShape u = m40965u(transitLineLeg.f42112f);
        MVLineLeg mVLineLeg = new MVLineLeg();
        mVLineLeg.time = v;
        mVLineLeg.lineId = c;
        mVLineLeg.mo34372s();
        mVLineLeg.stopSequenceIds = c2;
        mVLineLeg.shape = u;
        LongServerId longServerId = transitLineLeg.f42114h;
        if (longServerId != null) {
            mVLineLeg.tripId = longServerId.f15137b;
            mVLineLeg.mo34375u();
        }
        return mVLineLeg;
    }

    /* renamed from: y */
    public static MVRouteType m40969y(TripPlannerTransportType tripPlannerTransportType) {
        switch (C16081a.f41888r[tripPlannerTransportType.ordinal()]) {
            case 1:
                return MVRouteType.Tram;
            case 2:
                return MVRouteType.Subway;
            case 3:
                return MVRouteType.Rail;
            case 4:
                return MVRouteType.Bus;
            case 5:
                return MVRouteType.Ferry;
            case 6:
                return MVRouteType.Cable;
            case 7:
                return MVRouteType.Gondola;
            case 8:
                return MVRouteType.Funicular;
            default:
                return null;
        }
    }

    /* renamed from: z */
    public static MVTripPlanTransportOptionPref m40970z(TripPlannerTransportType tripPlannerTransportType) {
        switch (C16081a.f41888r[tripPlannerTransportType.ordinal()]) {
            case 9:
                return MVTripPlanTransportOptionPref.BICYCLE;
            case 10:
                return MVTripPlanTransportOptionPref.SCOOTER;
            case 11:
                return MVTripPlanTransportOptionPref.MOPED;
            case 12:
                return MVTripPlanTransportOptionPref.CAR;
            case 13:
                return MVTripPlanTransportOptionPref.PERSONAL_CAR;
            default:
                return null;
        }
    }
}
